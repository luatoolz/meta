describe('string', function()
  setup(function() require 'meta' end)
  it("replace", function()
    assert.is_nil(string.replace(nil, nil, nil))
    assert.equal('', string.replace('', nil, nil))
    assert.truthy(string.replace('one:two:three', "%:", "/") == "one/two/three")
  end)
  it("startswith", function()
    assert.truthy(string.startswith('test', 'te'))
    assert.truthy(string.startswith(" ", " "))
    assert.truthy(string.startswith("", ""))
    assert.falsy(string.startswith('test', 'fake'))
    assert.falsy(string.startswith('test', 'o'))
  end)
  it("endswith", function()
    assert.truthy(string.endswith('test', 'st'))
    assert.truthy(string.endswith(" ", " "))
    assert.truthy(string.endswith("", ""))
    assert.falsy(string.endswith('test', 'fake'))
    assert.falsy(string.endswith('test', 'o'))
  end)
  it("trim", function()
    assert.equal('', string.trim(''))
    assert.equal('', string.trim(' '))
    assert.equal('s', string.trim('  s'))
    assert.equal('s', string.trim('s'))
    assert.equal('s', string.trim('s '))
    assert.equal('s', string.trim('s  '))
    assert.equal('a some sort', string.trim(' a some sort   '))
  end)
  it("lstrip", function()
    assert.equal("", string.lstrip(""))
    assert.equal("", string.lstrip("", ""))
    assert.equal("", string.lstrip("www", "www"))
    assert.equal('google.com/some/url', string.lstrip("https://www.google.com/some/url", 'https://', 'http://', 'www.'))
    assert.truthy('google.com/some/url', string.lstrip("http://www.google.com/some/url", 'https://', 'http://', 'www.'))
    assert.truthy('/some/url', string.lstrip("https://www.google.com/some/url", 'https://', 'http://', 'www.', 'google.com'))
    assert.truthy('.com/some/url', string.lstrip("http://www.google.com/some/url", 'https://', 'http://', 'www.', 'google'))
  end)
  it("rstrip", function()
    assert.equal("", string.rstrip(""))
    assert.equal("", string.rstrip("", ""))
    assert.equal("", string.rstrip("www", "www"))
    assert.equal("w", string.rstrip("www", "ww"))
    assert.equal("", string.rstrip("w", "w"))
    assert.equal("", string.rstrip(".", "."))
    assert.equal("some/path", string.rstrip("some/path/", "/"))
    assert.equal("/some/path", string.rstrip("/some/path/", "/"))
  end)
  --[[
  it("split", function()
    assert.same({"1,2"}, string.split(nil, "1,2"))
    assert.same({"1", ",", "2", " ", "3"}, (''):split("1,2 3"))
    assert.same({"1", "2"}, (','):split("1,2"))
    assert.same({"1", "2"}, (','):split('1,2'))
    assert.same({"1", "2 3"}, (','):split("1,2 3"))
    assert.same({"1", "2", "3"}, (", "):split("1, 2, 3"))
    assert.same({"1", "2", "3"}, (",,"):split("1,,2,,3"))
    assert.same({"1", "2", "3"}, ("a very WIERD mansion!@#$%^&*()"):split("1a very WIERD mansion!@#$%^&*()2a very WIERD mansion!@#$%^&*()3"))
  end)
--]]
  it("split", function()
    assert.same({"1,2"}, ('1,2'):split())
    assert.same({"1,2"}, ('1,2'):split(nil))
    assert.same({"1", ",", "2", " ", "3"}, ('1,2 3'):split(''))
    assert.same({"1", "2"}, ('1,2'):split(','))
    assert.same({"1", "2 3"}, ('1,2 3'):split(','))
    assert.same({"1", "2", "3"}, ('1, 2, 3'):split(', '))
    assert.same({"1", "2", "3"}, ('1,,2,,3'):split(',,'))
    assert.same({"1", "2", "3"}, ("1a very WIERD mansion!@#$%^&*()2a very WIERD mansion!@#$%^&*()3"):split("a very WIERD mansion!@#$%^&*()"))
  end)
  it("gsplit", function()
    local t = table
    assert.same({"1,2"}, t() .. ('1,2'):gsplit())
    assert.same({"1,2"}, t() .. ('1,2'):gsplit(nil))
    assert.same({"1", ",", "2", " ", "3"}, t() .. ('1,2 3'):gsplit(''))
    assert.same({"1", "2"}, t() .. ('1,2'):gsplit(','))
    assert.same({"1", "2 3"}, t() .. ('1,2 3'):gsplit(','))
    assert.same({"1", "2", "3"}, t() .. ('1, 2, 3'):gsplit(', '))
    assert.same({"1", "2", "3"}, t() .. ('1,,2,,3'):gsplit(',,'))
    assert.same({"1", "2", "3"}, t() .. ("1a very WIERD mansion!@#$%^&*()2a very WIERD mansion!@#$%^&*()3"):gsplit("a very WIERD mansion!@#$%^&*()"))
  end)
  it("tohash", function()
    assert.same({}, (''):tohash())
    assert.same({x=true}, ('x'):tohash())
    assert.same({x=true, y=true}, ('x y'):tohash())
    assert.same({x=true, y=true, z=true}, ('x y z'):tohash())
    assert.same({x=true, y=true, z=true}, ('x x y z'):tohash())
    assert.same({x=true, y=true, z=true}, ('x y y z'):tohash())
    assert.same({x=true, y=true, z=true}, ('x y z z'):tohash())
    assert.same({xxx=true, yyy=true, zzzz=true}, ('xxx    yyy   zzzz  zzzz'):tohash())
  end)
  it("match", function()
    assert.truthy(string.match("\n\n\n<html>", "^[%s\n]*%<%s*html"))
    assert.truthy(string.match("\n\n\n\n<!DOCTYPE html>", "^[%s\n]*%<%!DOCTYPE"))

    local digits = ('%d+'):matcher()
    local tobool = ('%d+'):matcher(true)
    assert.equal('77', digits('a77qq'))
    assert.is_true(tobool('a77qq'))
  end)
  it("null", function()
    assert.equal('any', string.null("any"))
    assert.is_nil(string.null(""))
  end)
  it("prefix", function()
    assert.equal("", string.prefix(''))
    assert.equal("", string.prefix('', nil))
    assert.equal("", string.prefix('', ""))
    assert.equal("x", string.prefix('', "x"))
    assert.equal("x", string.prefix('x', ""))
    assert.equal("google.com", string.prefix("google.com"))
    assert.equal("www.google.com", string.prefix("google.com", "www."))
  end)
  it("join", function()
    assert.is_nil((''):join():null())
    assert.is_nil(string.join(''):null())
    assert.is_nil(string.join('', nil):null())
    assert.is_nil(string.join('', nil, nil):null())
    assert.is_nil(string.join('', nil, nil, nil):null())
    assert.is_nil(string.join('', '', nil):null())
    assert.is_nil(string.join(':', '', nil):null())
    assert.is_nil(string.join('', '', ""):null())
    assert.is_nil(string.join(':', '', ""):null())
    assert.equal("x", string.join('', '', "x"))
    assert.equal("x", string.join('', 'x', ""))
    assert.equal("x", string.join(':', 'x', ""))
    assert.equal("x", string.join(':', '', "x"))
    assert.equal("google.com", string.join('.', "google", "com"))
    assert.equal("www.google.com", string.join('.', "www", "google", "com"))
  end)
  it("join", function()
    local join = string.sep:joiner()
    assert.equal('x/y', join('x', 'y'))
    assert.equal('x/y/z', join('x', 'y', 'z'))
  end)
  it("sub", function() assert.equal('', (''):sub(2)) end)
  if debug and debug.getmetatable and getmetatable("") ~= nil then
    it("__mod", function() assert.equal('7', '%s' % 7) end)
    it("mt", function()
      assert.is_nil(getmetatable(string))
      assert.is_not_nil(getmetatable(""))
    end)
  end
end)
