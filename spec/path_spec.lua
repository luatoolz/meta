describe("path", function()
  local meta, is, path, tuple
  setup(function()
    meta = require "meta"
    is = meta.is
    path = meta.path
    tuple = table.tuple
  end)
  it("meta", function()
    assert.is_true(is.callable(path))
  end)
  describe("new", function()
    it(".", function()
    assert.equal('', tostring(path('')))
    assert.equal(path(''), path(''))
    assert.equal(path(''), path('.'))
    assert.equal(path(''), path())
    assert.equal(path(''), path({}))
    assert.equal(path(''), path(tuple('')))
    assert.equal(path(''), path(tuple('.')))
    assert.equal(path(''), path(tuple()))
    assert.equal(path(''), path(tuple({})))
    assert.equal(path(''), path(tuple(path(''))))
    end)
    it("1", function()
    assert.equal('testdata', tostring(path('testdata')))
    assert.equal(path('testdata'), path('testdata'))
    assert.equal(path('testdata'), path('./testdata'))
    assert.equal(path('testdata'), path({'testdata'}))

    assert.equal(path('testdata'), path({tuple('testdata')}))

    assert.equal(path('testdata'), path(path('testdata')))
    assert.equal(path('testdata'), path(tuple('testdata')))
    assert.equal(path('testdata'), path(tuple('./testdata')))
    assert.equal(path('testdata'), path(tuple({'testdata'})))
    assert.equal(path('testdata'), path(tuple(path('testdata'))))
    end)
    it("2", function()
    assert.equal('testdata/x', tostring(path('testdata/x')))
    assert.equal(path('testdata/x'), path('testdata/x'))
    assert.equal(path('testdata/x'), path('./testdata/x'))
    assert.equal(path('testdata/x'), path({'testdata/x'}))
    assert.equal(path('testdata/x'), path(tuple('testdata/x')))
    assert.equal(path('testdata/x'), path(tuple('./testdata/x')))
    assert.equal(path('testdata/x'), path(tuple({'testdata/x'})))
    assert.equal(path('testdata/x'), path({tuple('testdata/x')}))

    assert.equal(path('testdata/x'), path('testdata','x'))
    assert.equal(path('testdata/x'), path({'testdata'},'x'))
    assert.equal(path('testdata/x'), path('testdata',{'x'}))
    assert.equal(path('testdata/x'), path({'testdata','x'}))

    assert.equal(path('testdata/x'), path(path('testdata'),path('x')))
    assert.equal(path('testdata/x'), path(path('./testdata'),path('x')))
    assert.equal(path('testdata/x'), path(path({'testdata','x'})))
    assert.equal(path('testdata/x'), path({path('testdata'),path('x')}))

    assert.equal(path('testdata/x'), path('testdata',tuple('x')))
    assert.equal(path('testdata/x'), path(tuple('testdata'),'x'))
    assert.equal(path('testdata/x'), path({'testdata'},tuple('x')))
    assert.equal(path('testdata/x'), path(tuple('testdata'),{'x'}))
    assert.equal(path('testdata/x'), path(tuple({'testdata','x'})))
    assert.equal(path('testdata/x'), path(tuple({tuple('testdata','x')})))
    end)
    it("2 + .. = 1", function()
    assert.equal('testdata', tostring(path('testdata','x','..')))
    assert.equal(path('testdata'), path('testdata','x','..'))
    assert.equal(path('testdata'), path('./testdata','x','..'))
    assert.equal(path('testdata'), path({'testdata','x','..'}))
    assert.equal(path('testdata'), path({'testdata','x'}, '..'))
    assert.equal(path('testdata'), path({'testdata'}, 'x', '..'))
    assert.equal(path('testdata'), path({'testdata'}, {'x'}, {'..'}))
    assert.equal(path('testdata'), path({'testdata'}, 'x', {'..'}))
    assert.equal(path('testdata'), path({'testdata'}, {'x'}, '..'))
    assert.equal(path('testdata'), path('testdata', {'x'}, {'..'}))

    assert.equal(path('testdata'), path(tuple({'testdata'}, {'x'}, {'..'})))
    assert.equal(path('testdata'), path(tuple({'testdata'}, {tuple('x')}, tuple({'..'}))))

    assert.equal('testdata', tostring(path('testdata','x','..')))
    assert.equal(path('testdata'), path(path('testdata'),'x','..'))
    assert.equal(path('testdata'), path(path('./testdata'),'x','..'))
    assert.equal(path('testdata'), path(path({'testdata','x','..'})))
    assert.equal(path('testdata'), path(path({'testdata','x'}), '..'))
    assert.equal(path('testdata'), path(path({'testdata'}), 'x', '..'))
    assert.equal(path('testdata'), path(path({'testdata'}), {'x'}, {'..'}))
    assert.equal(path('testdata'), path(path({'testdata'}), 'x', {'..'}))
    assert.equal(path('testdata'), path(path({'testdata'}), {'x'}, '..'))
    assert.equal(path('testdata'), path(path('testdata'), {'x'}, {'..'}))
    end)
    it("3 + .. + .. = 1", function()
    assert.equal('testdata', tostring(path('testdata','x','..','y','..')))
    assert.equal(path('testdata'), path('testdata','x','..','y','..'))
    assert.equal(path('testdata'), path('./testdata','x','..','y','..'))
    assert.equal(path('testdata'), path({'testdata','x','..','y','..'}))

    assert.equal(path('testdata'), path(tuple('testdata','x','..','y','..')))
    assert.equal(path('testdata'), path(tuple({'testdata','x','..','y','..'})))
    assert.equal(path('testdata'), path({tuple('testdata','x','..','y','..')}))

    assert.equal(path('testdata'), path({'testdata',tuple('x','..'),tuple('y','..')}))
    end)
    it("3 + .. + .. = 1", function()
    assert.equal('testdata', tostring(path(tuple('testdata'),'x','..')))
    assert.equal(path('testdata'), path(path('testdata'),'x','..'))
    assert.equal(path('testdata'), path(path('./testdata'),'x','..'))
    assert.equal(path('testdata'), path(path({'testdata','x','..'})))
    assert.equal(path('testdata'), path(path({'testdata','x'}), '..'))
    assert.equal(path('testdata'), path(path({'testdata'}), 'x', '..'))
    assert.equal(path('testdata'), path(path({'testdata'}), {'x'}, {'..'}))
    assert.equal(path('testdata'), path(path({'testdata'}), 'x', {'..'}))
    assert.equal(path('testdata'), path(path({'testdata'}), {'x'}, '..'))
    assert.equal(path('testdata'), path(path('testdata'), {'x'}, {'..'}))
    end)
    it("root", function()
    assert.equal('/testdata', tostring(path('//testdata')))
    assert.equal('/testdata', tostring(path('//testdata')))
    assert.equal('/testdata', tostring(path('/testdata')))
    assert.equal('/testdata', tostring(path('/','testdata')))
    assert.equal('/', tostring(path('/','')))
    assert.equal('/', tostring(path('','/')))
    assert.equal('/', tostring(path('/','/')))
    assert.equal(path('/'), path('/'))
    assert.equal(path('/'), path('/','','/'))
    assert.equal(path('/testdata/x'), path('/','testdata','x'))
    assert.equal(path('/testdata/x'), path('/testdata','x'))
    assert.equal(path('/testdata/x'), path('/testdata/x'))
    end)
  end)
  it("normalize", function()
    assert.equal(path('testdata/x'), path('testdata/x/'))
    assert.equal(path('testdata/x'), path('testdata/x'))
    assert.equal(path('testdata/x'), path('testdata//x'))
    assert.equal(path('testdata/x'), path('testdata///x'))
    assert.equal(path('testdata/x'), path('testdata////x'))

    assert.equal(path('testdata/x'), path('testdata/x/'))
    assert.equal(path('testdata/x'), path('testdata//x//'))
    assert.equal(path('testdata/x'), path('testdata///x///'))
    assert.equal(path('testdata/x'), path('testdata////x///'))
    assert.equal(path('testdata/x'), path('testdata','x//'))

    assert.equal(path('testdata/x'), path('testdata/x/../y/z/c/../../../x'))
    assert.equal(path('testdata/x'), path('testdata/../testdata/../testdata/x'))
    assert.equal(path('testdata/x'), path('testdata///x'))
    assert.equal(path('testdata/x'), path('testdata////x'))
  end)
  it("isdir/isfile/exists", function()
    assert.is_true(path('testdata').exists)
    assert.is_true(path('testdata/test').exists)
    assert.is_true(path('testdata/dir').exists)

    assert.is_true(path('testdata').isdir)
    assert.is_nil(path('testdata').isfile)
    assert.is_true(path('testdata/test').isfile)
    assert.is_nil(path('testdata/noneexistent').isfile)
    assert.is_nil(path('testdata/noneexistent').isdir)

    assert.is_true(path('testdata/test_symlink').isfile)
    assert.is_true(path('testdata/dir_symlink').isdir)
    assert.is_nil(path('testdata/noneexistent_symlink').isfile)
  end)
  it("root/isabs/abs/ext", function()
    assert.is_nil(path('').root)
    assert.is_nil(path('').isabs)

    assert.equal('/', path('/usr').root)
    assert.is_true(path('/usr').isabs)

    assert.equal('txt', (path('testdata', 'mkdir')/'file.txt').ext)
    assert.equal('zip', (path('testdata', 'mkdir')/'file.xls.zip').ext)

    assert.equal('/usr/bin', tostring(path('/', 'usr', 'bin').abs))

    local paths = require 'paths'
    assert.equal(paths.concat('testdata', 'ok'), tostring(path('testdata/ok').abs))
  end)
  it("mkdir/rmdir write/append/rm size/content", function()
    local mk = path('testdata', 'mkdir')
    local a = mk/'a'
    local b = a/'b'
    local f = b/'file.txt'
    assert.is_true(mk.isdir)
    assert.is_nil(b.isdir)
    assert.is_nil(a.isdir)

    assert.is_true(b.mkdir)
    assert.is_true(b.isdir)
    assert.is_true(a.isdir)

    assert.is_nil(f.isfile)
    assert.equal(16, f:write('1234567812345678', 0))
    assert.is_true(f.isfile)
    assert.equal(16, f.size)
    assert.equal(16, f:append('4444444422222222'))
    assert.equal(32, f.size)
    assert.equal('12345678123456784444444422222222', f.content)
    assert.is_nil(b.rmdir)
    assert.is_true(f.rm)
    assert.is_nil(f.isfile)
    assert.is_true(b.rmdir)
    assert.is_true(a.rmdir)
    assert.is_true(mk.isdir)
  end)
  it("dirs/files/items", function()
    local dir = path('testdata/ok')
    assert.values(table('dot'), table() .. dir.dirs)
    assert.values(table('init.lua', 'message.lua'), table() .. dir.files)
    assert.values(table('dot', 'init.lua', 'message.lua'), table() .. dir.items)
  end)
end)