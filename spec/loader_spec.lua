describe('loader', function()
  local meta, cache, loader, module, tl, no
  setup(function()
    meta = require "meta"
    cache = meta.cache
    loader = meta.loader
    module = meta.module
    tl = require "testdata.loader"
    no = meta.no
  end)
  it("ok", function()
    assert.is_table(cache)
    assert.is_table(tl)
    assert.is_not_nil(tl.ok)
    assert.equal('ok', tl.ok.message.data)
    local q = tl.ok
    assert.equal('ok', q.message.data)
  end)
  it("eq meta", function()
    assert.same(getmetatable(require("meta")), getmetatable(cache.new.loader))
    assert.equal(getmetatable(cache.new.loader), getmetatable(require("meta")))
    assert.equal(getmetatable(meta), getmetatable(cache.new.loader))
    assert.equal(getmetatable(require("meta")), getmetatable(loader("meta")))
  end)
  it("eq loader", function()
    assert.equal(loader('testdata/loader/noinit'), loader('testdata/loader/noinit'))
    assert.equal(loader('testdata/req/ok'), loader('testdata/req/ok'))
  end)
  it("module.loader", function()
    local noinit = loader('testdata/loader/noinit')
    local m = module(noinit)
    assert.is_table(noinit)
    assert.is_table(m)
    assert.equal('ok', noinit.message.data)
    assert.equal('ok', noinit['ok.message'].data)
  end)
  it("req", function()
    local req = require "testdata/req"
    assert.is_table(req)
    assert.is_nil(rawget(req, 'ok'))
    local req_ok = require "testdata/req/ok"
    assert.is_table(req_ok)
    local loaders = loader
    assert.is_table(loaders["testdata/req/ok"])
    assert.is_table(req)
    assert.is_table(req['ok'])
    assert.equal('ok', req.ok.message.data)
  end)
  it("loader() == loader()", function() assert.equal(loader('testdata/lt'), loader('testdata/lt')) end)
  it("dot", function()
    assert.is_table(tl)
    assert.is_not_nil(tl.dot)
    assert.equal('ok', tl.dot['ok.message'].data)
  end)
  it("noinit", function()
    tl = require "testdata.loader"
    assert.is_not_nil(tl)
    assert.is_table(tl)
    assert.is_not_nil(tl.noinit)
    assert.equal('table', type(tl.noinit))
    assert.is_table(module(tl))
    assert.equal('ok', tl.noinit.message.data)
    assert.equal('ok', tl.noinit['ok.message'].data)
    assert.equal('ok', tl.noinit.message.data)
  end)
  it("regular load + recursive preload", function()
    assert.falsy(module("testdata.webapi").topreload)
    assert.falsy(module("testdata.webapi").torecursive)
    local webapi = loader("testdata.webapi", true, true)
    local webapi2 = module("testdata.webapi").recursive.preload
    assert.equal(true, module("testdata.webapi").topreload)
    assert.equal(true, module(webapi).topreload)
    assert.equal(true, module(webapi2).topreload)
    assert.equal(true, module("testdata.webapi").torecursive)
    assert.equal(true, module(webapi).torecursive)
    assert.equal(true, module(webapi2).torecursive)
    assert.equal(webapi, webapi2)
    assert.equal(webapi, require "testdata.webapi")
  end)
  it("recursive preload", function()
    local webapi = loader("testdata.webapi2", true, true)
    local webapi2 = module("testdata.webapi2").recursive.preload
    assert.equal(true, module("testdata.webapi2").topreload)
    assert.equal(true, module(webapi).topreload)
    assert.equal(true, module(webapi2).topreload)
    assert.equal(true, module("testdata.webapi2").torecursive)
    assert.equal(true, module(webapi).torecursive)
    assert.equal(true, module(webapi2).torecursive)
    assert.equal(webapi, webapi2)
    assert.equal(webapi, require "testdata.webapi2")
  end)
  it("__iter", function()
    assert.has_key('lua', cache.ordered.pkgdirs)
    assert.has_key('.', cache.ordered.pkgdirs)
    assert.values({'testdata/files'}, no.scan('testdata.files'))
    assert.values({'a', 'b', 'c', 'i'}, table.map(table.iter(loader('testdata.files'))))
    assert.values({'a', 'b', 'c', 'i'}, table.iter(loader('testdata.files')))
  end)
  it("__concat", function()
    assert.keys({}, loader('testdata.files'))
    assert.keys({}, loader('testdata.files') .. false)
    assert.keys({}, loader('testdata.files') .. nil)
    assert.keys({}, loader('testdata.files') .. {})
    assert.keys({}, loader('testdata.files') .. table.iter({}))
    assert.keys({}, loader('testdata.files') .. {nil})
    assert.keys({}, loader('testdata.files') .. table.iter({nil}))
    assert.keys({}, loader('testdata.files') .. {'none'})
    assert.keys({}, loader('testdata.files') .. table.iter({'none'}))

    assert.keys({'a'}, loader('testdata.files') + 'a')
    assert.keys({'a', 'b'}, loader('testdata.files') + 'a' + 'b')
    assert.keys({'a', 'b'}, loader('testdata.files') .. {'a', 'b'})
    assert.keys({'a', 'b', 'c'}, loader('testdata.files') .. {'a', 'b', 'c'})
    assert.keys({'a', 'b', 'c', 'i'}, loader('testdata.files') .. true)
    assert.keys({'a', 'b', 'c', 'i'}, loader('testdata.files', true, true))

    assert.keys({'a', 'b', 'c', 'i'}, loader('testdata.files') .. true)
    assert.keys({'a', 'b', 'c', 'i'}, loader('testdata.files') .. false)
    assert.keys({'a', 'b', 'c', 'i'}, loader('testdata.files') .. nil)
    assert.keys({'a', 'b', 'c', 'i'}, loader('testdata.files') .. {})
    assert.keys({'a', 'b', 'c', 'i'}, loader('testdata.files') .. {'i'})
    assert.keys({'a', 'b', 'c', 'i'}, loader('testdata.files') .. {nil})

    assert.keys({'a', 'b', 'c', 'i'}, loader('testdata.files') .. table.iter({'i'}))
    assert.keys({'a', 'b', 'c', 'i'}, loader('testdata.files') .. table.iter({}))
    assert.keys({'a', 'b', 'c', 'i'}, loader('testdata.files') .. table.iter({nil}))

    if module('t.storage.mongo').exists then
      assert.keys({}, loader('t/init.d'))

      local t = require "t"
      assert.keys({}, t.storage)
      assert.keys({}, t.storage.mongo)
      assert.keys({'mongo'}, t.storage)
    end
  end)
  it("__mul / __mod", function()
    local tt = function(x) return type(x) end
    local ok = function(x) return x and true or false end
    local isn = function(x) return type(x[1]) == 'number' end

    local ltf = loader('testdata.files')
    assert.same({a='table', b='table', c='table', i='table'}, ltf * tt)

    local l = loader('meta.assert')

    assert.keys({'callable', 'ends', 'factory', 'has_key', 'has_value', 'keys', 'loader', 'module_name', 'similar', 'type', 'values'}, l * ok)
    assert.same({callable=true, ends=true, factory=true, has_key=true, has_value=true, keys=true, loader=true, module_name=true, similar=true, type=true, values=true}, l * ok)
    assert.same({callable="table", ends="table", factory="table", has_key="table", has_value="table", keys="table", loader="table", module_name="table", similar="table", type="table", values="table"},
                l * tt)
    assert.same({callable=true, ends=false, factory=false, has_key=true, has_value=true, keys=true, loader=true, module_name=true, similar=true, type=true, values=true}, l * isn)

    assert.keys({'callable', 'has_key', 'has_value', 'keys', 'loader', 'module_name', 'similar', 'type', 'values'}, l % isn)
  end)
end)
