describe("mcache.file", function()
	local meta, is, mcache
	setup(function()
    meta = require "meta"
    is = meta.is ^ 'testdata'
    mcache = meta.mcache
	end)
  it("meta", function()
    assert.truthy(is)
    assert.truthy(is.callable(mcache.file))
  end)
  it("positive", function()
    assert.ends('meta/init.lua', mcache.file('meta'))
    assert.ends('testdata/loader/init.lua', mcache.file('testdata.loader'))
    assert.ends('testdata/loader/init.lua', mcache.file('testdata/loader'))
    assert.ends('testdata/loader/init.lua', mcache.file('testdata', 'loader'))
    assert.ends('testdata/loader/noinit/message.lua', mcache.file('testdata.loader.noinit', 'message'))
    assert.ends('testdata/loader/noinit/message.lua', mcache.file('testdata/loader/noinit', 'message'))
    assert.ends('testdata/loader/noinit/message.lua', mcache.file('testdata.loader.noinit.message'))
    assert.ends('testdata/loader/noinit/message.lua', mcache.file('testdata/loader/noinit/message'))
    assert.ends('testdata/loader/noinit/message.lua', mcache.file('testdata.loader.noinit', 'message'))
    assert.ends('testdata/loader/noinit/message.lua', mcache.file('testdata/loader/noinit', 'message'))
    assert.ends('testdata/loader/noinit/message.lua', mcache.file('testdata.loader.noinit.message'))
    assert.ends('testdata/loader/noinit/message.lua', mcache.file('testdata/loader/noinit/message'))
  end)
  it("negative", function()
    assert.is_nil(mcache.file('testdata.loader', 'noinit'))
    assert.is_nil(mcache.file('testdata/loader', 'noinit'))

    assert.is_nil(mcache.file[''])
    assert.is_nil(mcache.file[{}])
    assert.is_nil(mcache.file[0])
    assert.is_nil(mcache.file[false])
    assert.is_nil(mcache.file[true])

    assert.is_nil(mcache.file(''))
    assert.is_nil(mcache.file({}))
    assert.is_nil(mcache.file(0))
    assert.is_nil(mcache.file(false))
    assert.is_nil(mcache.file(true))
  end)
  it("nil", function()
    assert.is_nil(mcache.file())
    assert.is_nil(mcache.file(nil))
    assert.is_nil(mcache.file(nil, nil))
  end)
end)