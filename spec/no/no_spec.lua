describe('no', function()
  local meta, no, mcache, call
  setup(function()
    meta = require "meta"
    mcache = require 'meta.mcache'
    no = require 'meta.no'
    call = require 'meta.call'
    _ = meta.is ^ 'testdata'
  end)
  teardown(function()
    call.protect=true
  end)
  describe('load', function()
    it("testdata.noloader1", function() assert.is_table(call(no.load('testdata/noloader/init.lua'))) end)
    it("testdata.noloader", function()
      local l = no.load('testdata.noloader')
      assert.is_function(l)
      assert.is_table(l())
      assert.equal('ok', l().message)
    end)
    it("nil", function()
      assert.is_nil(no.load(nil))
      assert.is_nil(no.load())
    end)
    it("noneexistent", function() assert.is_nil(no.load('testdata.noneexistent')) end)
  end)
  describe('loaded', function()
    it("noneexistent", function()
      assert.is_nil(package.loaded[nil])
      assert.is_nil(package.loaded[nil])
      assert.is_nil(package.loaded[nil])
    end)
    it("noneexistent", function()
      assert.is_nil(package.loaded['noneexistent'])
      assert.is_nil(package.loaded['noneexistent'])
      assert.is_nil(package.loaded['noneexistent'])
    end)
    it("testdata.noloader", function()
      _ = no.require('testdata.noloader')
      assert.equal('ok', (mcache.loaded['testdata.noloader'] or {}).message)
    end)
  end)
  it("ok", function()
    assert.is_table(no.require('testdata'))
    assert.is_table(no.require("testdata.ok"))
  end)
  it("noneexistent", function()
    call.protect=false; assert.has_error(function() return no.require('testdata.noneexistent') end); call.protect=true
  end)
  it("failed", function()
    assert.is_nil(package.loaded['nothing_existent'])
    assert.is_nil(package.loaded['testdata.failed'])
    call.protect=false; assert.has_error(function() return no.require('testdata.failed') end); call.protect=true
  end)
  it("or", function()
    call.protect=false; assert.has_error(function() return no.require('testdata.noneexistent') or no.require('testdata.ok') end); call.protect=true
    assert.truthy(no.require('testdata.ok') or no.require('testdata.noneexistent'))
    call.protect=false; assert.has_error(function() return no.require('testdata.noneexistent') or no.require('os') end); call.protect=true
    assert.truthy(os or no.require('testdata.noneexistent'))
    call.protect=false; assert.has_error(function() return (no.require('testdata.noneexistent') or no.require('os')).remove end); call.protect=true
  end)
  describe('mcache:load', function()
    local load = mcache.load
    it("nil", function()
      assert.is_nil(load())
      assert.is_nil(load(nil))
      assert.is_nil(load(''))
    end)
    it("string", function() assert.is_nil(mcache.file('testdata/loader/noinit')) end)
  end)
end)