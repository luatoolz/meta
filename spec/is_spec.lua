describe("is", function()
  local meta, is
  setup(function()
    meta = require "meta"
    is = meta.is
  end)
  it("meta", function()
    assert.truthy(is)
    assert.equal(is, is ^ 'meta')
    assert.truthy(is.non)
    assert.is_function(pairs(is))
  end)
  it("is vars", function()
    assert.is_nil(is.__path)
    assert.is_nil(is.__id)
    assert.is_nil(is.__non)
    assert.is_nil(is.__rv)
  end)
  describe("is.__div", function()
    it("is/noneexistent", function()
      local path = 'noneexistent'
      local it = is/path
      assert.equal(path, it.__path)
      assert.is_nil(it.__non)
      assert.equal(path, it.__id)
      assert.has_error(function() return assert(it('some')) end)

      it = it/path
      local sub = path .. '.' .. path
      assert.equal(sub, it.__path)
      assert.is_nil(it.__non)
      assert.equal(path, it.__id)
      assert.has_error(function() return assert(it('some')) end)
    end)
    it("is/nil", function()
      assert.is_nil(is/nil)
    end)
    it("is/is", function()
      assert.equal(is, is/is)
    end)
    it("is/table", function()
      local it = is/{__id='test'}
      assert.is_true(is.like(it, is))
      assert.equal('test', it.__id)
    end)
    it("is/func", function()
      local f = is/string.null
      assert.is_nil(f(''))
      assert.is_nil(f())
      assert.is_nil(f(nil))
      assert.is_nil(f(true))
      assert.is_nil(f(7))
      assert.is_nil(f(string.upper))
      assert.is_true(f('ok'))
    end)
    it("is/callable", function()
      local f = is/setmetatable({},{__call=function(self, x) return string.null(x) end})
      assert.is_nil(f(''))
      assert.is_nil(f())
      assert.is_nil(f(nil))
      assert.is_nil(f(true))
      assert.is_nil(f(7))
      assert.is_nil(f(string.upper))
      assert.is_true(f('ok'))
    end)
  end)
  describe("is.non.__div", function()
    it("is.non", function()
      assert.is_true(is.like(is, is.non))
    end)
    it("is.non/noneexistent", function()
      local path = 'noneexistent'
      local it = is.non/path
      assert.equal(path, it.__path)
      assert.is_true(it.__non)
      assert.equal(path, it.__id)
      assert.has_error(function() return assert(it('some')) end)

      it = it/path
      local sub = path .. '.' .. path
      assert.equal(sub, it.__path)
      assert.is_true(it.__non)
      assert.equal(path, it.__id)
      assert.has_error(function() return assert(it('some')) end)
    end)
    it("is.non/nil", function()
      assert.is_nil(is.non/nil)
    end)
    it("is.non/is", function()
      assert.equal(is, is.non/is)
      assert.equal(is.non, is.non/is.non)
    end)
    it("is.non/table", function()
      local it = is.non/{__id='test'}
      assert.is_true(is.like(it, is))
      assert.equal('test', it.__id)
      assert.is_true(it.__non)
    end)
    it("is.non/func", function()
      local f = is.non/string.null
      assert.is_true(f(''))
      assert.is_true(f())
      assert.is_true(f(nil))
      assert.is_true(f(true))
      assert.is_true(f(7))
      assert.is_true(f(string.upper))
      assert.is_nil(f('ok'))
    end)
    it("is.non/callable", function()
      local f = is.non/setmetatable({},{__call=function(self, x) return string.null(x) end})

      assert.is_true(is.like(is, f))
      assert.is_true(f.__non)
      assert.is_true(is.callable(f.__rv))

      assert.is_true(f(''))
      assert.is_true(f())
      assert.is_true(f(nil))
      assert.is_true(f(true))
      assert.is_true(f(7))
      assert.is_true(f(string.upper))
      assert.is_nil(f('ok'))
    end)
    it("is.stringer", function()
      assert.callable(is.has.tostring)
      assert.is_true(is.has.tostring(setmetatable({'a'},{__tostring=function() end})))
    end)
  end)
end)