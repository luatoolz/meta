describe("seen", function()
  local meta, mseen, to, iter
  setup(function()
    meta = require "meta"
    iter = meta.iter
    mseen = meta.seen
    to = {number=function(x) return ((getmetatable(x) or {}).__tonumber or function() return end)(x) end}
  end)
  it("test", function()
    assert.is_nil(next(mseen))
    assert.is_nil(rawget(mseen, 'any'))

    assert.same({a=true, b=true}, table.hashed({'a','b'}))
    assert.equal(1, table.any({'a','b'}, 'a'))
    assert.equal(2, table.any({'a','b'}, 'b'))
    assert.equal(nil, table.any({'a','b'}, 'z'))

    assert.is_nil(rawget(mseen, 'any'))
    assert.is_nil(rawget(mseen, 'any1'))
    assert.is_nil(rawget(mseen, 'other'))
    assert.is_nil(rawget(mseen, 'other1'))

    local seen = mseen()
    seen['any1']=true
    seen['other1']=true

    assert.is_true(seen['any1'])
    assert.is_true(seen['other1'])
    assert.same({'any1','other1'}, table.map(seen))

    assert.equal(seen, seen + 'ok1')
    assert.equal(seen, seen + 'ok1')
    assert.same({'any1','other1', 'ok1'}, table.map(seen))

    seen = mseen()
    assert.equal(seen, seen + 'ok1')
    assert.is_true(seen['ok1'])
    assert.is_true(seen['ok1'])
    assert.equal(seen, seen + 'ok1')
    assert.is_true(seen['ok1'])
  end)
  it("test with empty table", function()
    local o = {}
    assert.equal(0, #o)
    local seen = mseen(o)
    assert.equal(0, #o)
    assert.equal(0, to.number(seen))
    assert.is_false(seen['any'])
    assert.equal('any', o[1])
    assert.equal(1, to.number(seen))
    assert.equal(1, #o)
    assert.is_table(seen + 'any')
    assert.equal(1, #o)
    assert.is_true(seen['any'])
    assert.equal(1, #o)

    assert.same({'any'}, o)

    assert.equal('any', o[1])
    assert.equal(1, #o)
    assert.is_nil(o[2])
    assert.falsy(table.any(o, 'other2'))

    assert.is_table(seen + 'other2')
    assert.truthy(table.any(o, 'other2'))

    assert.same({'any','other2'}, o)
    assert.equal(2, #o)
    assert.is_table(seen + 'other2')
    assert.equal(2, #o)
    assert.equal(seen, seen + 'ok')
    assert.equal(3, #o)
    assert.is_table(seen + 'ok')
    assert.equal(3, #o)

    assert.equal(3, table.any(o, 'ok'))

    assert.is_table(seen - 'ok')
    assert.equal(2, to.number(seen))
    assert.equal(2, #o)
    assert.is_table(seen + 'ok')
    assert.equal(3, to.number(seen))
    assert.equal(3, #o)

    -- TODO: better impl
    seen['ok'] = nil
    assert.equal(2, to.number(seen))
    --    assert.equal(2, #o)
    assert.is_table(seen + 'ok')
    assert.equal(3, #o)
    assert.is_table(seen + 'okokok')
    assert.equal(4, #o)
    assert.same({'any', 'other2', 'ok', 'okokok'}, table.map(iter(seen)))
    assert.same({'any', 'other2', 'ok', 'okokok'}, table.map(seen))
    assert.same({'any', 'other2', 'ok', 'okokok'}, table.map(iter(o)))
    assert.same({'any', 'other2', 'ok', 'okokok'}, o)
    seen = mseen()
    assert.equal(seen, seen + 'ok')
    assert.is_table(seen + 'ok')
    assert.is_table(seen + 'ok')
  end)
  it("test with non-empty table", function()
    local o = table({'x', 'y', 'z'})
    assert.equal(3, #o)
    local seen = mseen(o)
    assert.same({'x', 'y', 'z'}, o)

    assert.equal(3, #o)
    assert.equal(3, to.number(seen))
    assert.is_false(seen['any'])
    assert.is_true(seen['any'])
    assert.equal(4, #o)
    assert.is_false(seen['other3'])
    assert.is_true(seen['other3'])
    assert.equal(5, #o)
    assert.equal(seen, seen + 'ok')
    assert.equal(6, #o)
    assert.is_table(seen + 'ok')
    assert.equal(6, #o)
    assert.is_table(seen + 'ok')
    assert.equal(6, #o)
    assert.is_true(seen['ok'])
    assert.equal(6, #o)
    assert.is_false(seen['okokok'])
    assert.equal(7, #o)
    assert.same({'x', 'y', 'z', 'any', 'other3', 'ok', 'okokok'}, table.map(iter(seen)))
    assert.same({'x', 'y', 'z', 'any', 'other3', 'ok', 'okokok'}, table.map(seen))
    assert.same({'x', 'y', 'z', 'any', 'other3', 'ok', 'okokok'}, table.map(iter(o)))
    assert.same({'x', 'y', 'z', 'any', 'other3', 'ok', 'okokok'}, o)
  end)
  it("test with __mod", function()
    assert.same({'a', 'b'}, table('a', 'b', 'a')*mseen())
  end)
end)