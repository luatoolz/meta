describe("seen", function()
  local meta, seen, to
  setup(function()
    meta = require "meta"
    to = {number=function(x) return ((getmetatable(x) or {}).__tonumber or function() return end)(x) end}
  end)
  before_each(function() seen = meta.seen() end)
  it("test", function()
    assert.is_nil(next(seen))
    assert.is_false(seen['any'])
    assert.is_true(seen['any'])
    assert.is_false(seen['other'])
    assert.is_true(seen['other'])
    assert.equal(seen, seen + 'ok')
    assert.equal(seen, seen + 'ok')
    seen = meta.seen()
    assert.equal(seen, seen + 'ok')
    assert.is_true(seen['ok'])
    assert.is_true(seen['ok'])
    assert.equal(seen, seen + 'ok')
    assert.is_true(seen['ok'])
  end)
  it("test with empty table", function()
    local t = {}
    assert.equal(0, #t)
    seen = meta.seen(t)
    assert.equal(0, #t)
    assert.equal(0, to.number(seen))
    assert.is_false(seen['any'])
    assert.equal(1, to.number(seen))
    assert.equal(1, #t)
    assert.is_table(seen + 'any')
    assert.equal(1, #t)
    assert.is_true(seen['any'])
    assert.equal(1, #t)
    assert.is_table(seen + 'other')
    assert.equal(2, #t)
    assert.is_table(seen + 'other')
    assert.equal(2, #t)
    assert.equal(seen, seen + 'ok')
    assert.equal(3, #t)
    assert.is_table(seen + 'ok')
    assert.equal(3, #t)
    assert.is_table(seen - 'ok')
    assert.equal(2, to.number(seen))
    assert.equal(2, #t)
    assert.is_table(seen + 'ok')
    assert.equal(3, to.number(seen))
    assert.equal(3, #t)
    -- TODO: better impl
    seen['ok'] = nil
    assert.equal(2, to.number(seen))
    --    assert.equal(2, #t)
    assert.is_table(seen + 'ok')
    assert.equal(3, #t)
    assert.is_table(seen + 'okokok')
    assert.equal(4, #t)
    assert.same({'any', 'other', 'ok', 'okokok'}, table.map(table.iter(seen)))
    assert.same({'any', 'other', 'ok', 'okokok'}, table.map(table.iter(t)))
    assert.same({'any', 'other', 'ok', 'okokok'}, t)
    seen = seen()
    assert.equal(seen, seen + 'ok')
    assert.is_table(seen + 'ok')
    assert.is_table(seen + 'ok')
  end)
  it("test with non-empty table", function()
    local t = table({'x', 'y', 'z'})
    assert.equal(3, #t)
    seen = meta.seen(t)
    assert.equal(3, #t)
    assert.equal(3, to.number(seen))
    assert.is_false(seen['any'])
    assert.is_true(seen['any'])
    assert.equal(4, #t)
    assert.is_false(seen['other'])
    assert.is_true(seen['other'])
    assert.equal(5, #t)
    assert.equal(seen, seen + 'ok')
    assert.equal(6, #t)
    assert.is_table(seen + 'ok')
    assert.equal(6, #t)
    assert.is_table(seen + 'ok')
    assert.equal(6, #t)
    assert.is_true(seen['ok'])
    assert.equal(6, #t)
    assert.is_false(seen['okokok'])
    assert.equal(7, #t)
    assert.same({'x', 'y', 'z', 'any', 'other', 'ok', 'okokok'}, table.map(table.iter(seen)))
    assert.same({'x', 'y', 'z', 'any', 'other', 'ok', 'okokok'}, table.map(table.iter(t)))
    assert.same({'x', 'y', 'z', 'any', 'other', 'ok', 'okokok'}, t)
  end)
end)
