describe("type", function()
  local meta, tt
  setup(function()
    meta = require "meta"
    tt = meta.type
  end)
  it("loader", function()
    assert.is_table(meta)
    assert.is_table(meta.loader)
    assert.is_table(meta.module)
    assert.is_table(meta.is)
    assert.is_table(meta.cache)
    assert.is_table(meta.no)
    assert.is_table(meta.seen)
    assert.is_table(meta.type)
    assert.is_function(meta.clone)

    assert.equal('meta', tt(meta))
    assert.equal('meta/loader', tt(meta.loader))
    assert.equal('meta/module', tt(meta.module))
    assert.equal('meta/is', tt(meta.is))
    assert.equal('meta/cache', tt(meta.cache))
    assert.equal('meta/no', tt(meta.no))
    assert.equal('meta/seen', tt(meta.seen))
    assert.equal('meta/type', tt(meta.type))
    assert.equal('meta/clone', tt(meta.clone))
  end)
  it("require .", function()
    assert.is_table(require('meta'))
    assert.is_table(require('meta.loader'))
    assert.is_table(require('meta.module'))
    assert.is_table(require('meta.is'))
    assert.is_table(require('meta.cache'))
    assert.is_table(require('meta.no'))
    assert.is_table(require('meta.seen'))
    assert.is_table(require('meta.type'))
    assert.is_function(require('meta.clone'))

    assert.equal('meta', tt(require('meta')))
    assert.equal('meta/loader', tt(require('meta.loader')))
    assert.equal('meta/module', tt(require('meta.module')))
    assert.equal('meta/is', tt(require('meta.is')))
    assert.equal('meta/cache', tt(require('meta.cache')))
    assert.equal('meta/no', tt(require('meta.no')))
    assert.equal('meta/seen', tt(require('meta.seen')))
    assert.equal('meta/type', tt(require('meta.type')))
    assert.equal('meta/clone', tt(require('meta.clone')))
  end)
  it("require /", function()
    assert.is_table(require('meta'))
    assert.is_table(require('meta/loader'))
    assert.is_table(require('meta/module'))
    assert.is_table(require('meta/is'))
    assert.is_table(require('meta/cache'))
    assert.is_table(require('meta/no'))
    assert.is_table(require('meta/seen'))
    assert.is_table(require('meta/type'))
    assert.is_function(require('meta/clone'))

    assert.equal('meta', tt(require('meta')))
    assert.equal('meta/loader', tt(require('meta/loader')))
    assert.equal('meta/module', tt(require('meta/module')))
    assert.equal('meta/is', tt(require('meta/is')))
    assert.equal('meta/cache', tt(require('meta/cache')))
    assert.equal('meta/no', tt(require('meta/no')))
    assert.equal('meta/seen', tt(require('meta/seen')))
    assert.equal('meta/type', tt(require('meta/type')))
    assert.equal('meta/clone', tt(require('meta/clone')))
  end)
end)
