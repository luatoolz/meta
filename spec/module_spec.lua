describe('module', function()
  local module, call
  setup(function()
    require "meta"
    module = require "meta.module"
    call = require "meta.call"
    _ = module('testdata') ^ false
  end)
  it("self", function()
    assert.is_table(module('meta.module'))
    assert.is_nil(module())
    assert.is_nil(module(nil))
    assert.is_nil(module(''))
  end)
  it("meta", function()
    assert.is_table(module)
    local m = module('meta')
    assert.is_table(m)
    assert.equal('meta', m.name)
  end)
  it("#module", function()
    assert.equal(1, #module('meta'))
    assert.equal(2, #module('meta.module'))
  end)
  it("meta.loader", function()
    local m = module('meta.loader')
    assert.is_table(m)
    assert.equal('loader', m.id)
    assert.is_nil(m.isdir)
  end)
  it("module.noneexistent", function()
    assert.is_nil(module('noneexistent').ok)
  end)
  it("has", function()
    assert.truthy(module('meta').modz.loader)
    assert.truthy(module('testdata.init1').modz.file)
    assert.truthy(module('testdata.init1').modz.filedir)
    assert.falsy(module('testdata.init1').modz.fake)
    assert.falsy(module('testdata.init1').modz[''])
    assert.falsy(module('testdata.init1').modz[nil])
  end)
  it(".name", function()
    assert.equal('meta', module('meta').name)
    assert.equal('meta/loader', module('meta.loader').name)
    assert.equal('testdata/init1/file', module('testdata.init1.file').name)
    assert.equal('testdata/init1/dir', module('testdata.init1.dir').name)
    assert.equal('testdata/init1/dirinit', module('testdata.init1.dirinit').name)
    assert.equal('testdata/init1/filedir', module('testdata.init1.filedir').name)
    assert.equal('testdata/init1/all', module('testdata.init1.all').name)

    assert.equal('testdata/init2', module('testdata/init2').name)
    assert.equal('testdata/init2.file', module('testdata/init2.file').name)
    assert.equal('testdata/init2.dir', module('testdata/init2.dir').name)
    assert.equal('testdata/init2.dirinit', module('testdata/init2.dirinit').name)
    assert.equal('testdata/init2.filedir', module('testdata/init2.filedir').name)
    assert.equal('testdata/init2.all', module('testdata/init2.all').name)

    assert.equal('meta/assert', module('meta.assert').name)
  end)
  it(".file", function()
    assert.ends('meta/init.lua', module('meta').file)
    assert.ends('meta/loader.lua', module('meta.loader').file)
    assert.ends('testdata/init1/file.lua', module('testdata/init1/file').file)
    assert.equal(nil, module('testdata/init1/dir').file)
    assert.ends('testdata/init1/dirinit/init.lua', module('testdata/init1/dirinit').file)
    assert.ends('testdata/init1/filedir.lua', module('testdata/init1/filedir').file)
    assert.ends('testdata/init1/all.lua', module('testdata/init1/all').file)

    assert.ends('init2/init.lua', module('testdata.init2').file)
    assert.ends('init2/file.lua', module('testdata.init2.file').file)
    assert.is_nil(module('init2.dir').file)
    assert.ends('init2/dirinit/init.lua', module('testdata.init2.dirinit').file)
    assert.ends('init2/filedir.lua', module('testdata.init2.filedir').file)
    assert.ends('init2/all.lua', module('testdata.init2.all').file)
  end)
  it(".dir", function()
    assert.ends('meta', module('meta').dir)
    assert.is_nil(module('meta.loader').dir)
    assert.is_nil(module('testdata/init1/file').dir)
    assert.ends('testdata/init1/dir', module('testdata/init1/dir').dir)
    assert.ends('testdata/init1/dirinit', module('testdata/init1/dirinit').dir)
    assert.ends('testdata/init1/filedir', module('testdata/init1/filedir').dir)
    assert.ends('testdata/init1/all', module('testdata/init1/all').dir)

    assert.ends('testdata/init2', module('testdata.init2').dir)
    assert.ends('testdata/init2/dir', module('testdata.init2.dir').dir)
    assert.ends('testdata/init2/dirinit', (module('testdata.init2.dirinit') or {}).dir)
    assert.ends('testdata/init2/filedir', module('testdata.init2.filedir').dir)
    assert.ends('testdata/init2/all', module('testdata.init2.all').dir)
  end)
  it(".root", function()
    assert.equal('meta', module('meta').root)
    assert.equal('meta', module('meta.loader').root)
    assert.equal('luassert', module('luassert').root)
    assert.equal('meta', module('meta.assert').root)
  end)
  it(".chained", function()
    assert.is_true(module('meta').chained)
    assert.is_true(module('meta.loader').chained)
    assert.is_true(module('meta.assert').chained)
    assert.is_true(module('meta/assert').chained)

    assert.is_nil(module('luassert').chained)
    assert.is_nil(module('testdata').chained)
    assert.is_nil(module('testdata.assert').chained)
    assert.is_nil(module('testdata/assert').chained)
  end)
  describe(".d", function()
    it("normal", function()
      assert.equal('meta/module.d', module('meta.module').dddd)
      assert.equal('meta.d', module('meta').dddd)
      assert.equal('testdata.d', module('testdata').dddd)

      assert.is_nil(module('meta.module').ddd)
      assert.is_nil(module('meta').ddd)
      assert.is_nil(module('testdata').ddd)

      assert.is_nil(module('meta.module').dd)
      assert.is_nil(module('meta').dd)
      assert.is_nil(module('testdata').dd)

      assert.is_false(module('meta.module').d)
      assert.is_false(module('meta').d)
      assert.is_false(module('testdata').d)

      assert.is_nil(module('meta.module').handler)
      assert.is_nil(module('meta').handler)
      assert.is_nil(module('testdata').handler)
    end)
    describe("chained", function()
      it("name", function()
        local mod = module('meta.assert')
        assert.equal('assert', mod[-1])

        assert.equal('meta/assert.d', mod.dddd)
        assert.equal('assert.d', (mod.ddd or {})[-1])
        assert.is_true(mod.dd)
        assert.is_true(mod.d)

        assert.equal('meta/assert.d', mod.node)
        assert.equal('assert', mod.id)
      end)
      it("name.d", function()
        local mod = module('meta/assert.d')
        assert.equal('assert.d', mod[-1])

        assert.equal('meta/assert.d', mod.dddd)
        assert.equal('assert.d', (mod.ddd or {})[-1])
        assert.is_true(mod.dd)
        assert.is_true(mod.d)

        assert.equal('meta/assert.d', mod.node)
        assert.equal('assert', mod.id)
      end)
    end)
    describe("unchained", function()
      it("name", function()
        local mod = module('testdata.assert')
        assert.equal('assert', mod[-1])

        assert.equal('testdata/assert.d', mod.dddd)
        assert.equal('assert.d', (mod.ddd or {})[-1])
        assert.is_true(mod.dd)
        assert.is_true(mod.d)

        assert.equal('testdata/assert.d', mod.node)
        assert.equal('testdata/assert', mod.id)
      end)
      it("name.d", function()
        local mod = module('testdata/assert.d')
        assert.equal('assert.d', mod[-1])

        assert.equal('testdata/assert.d', mod.dddd)
        assert.equal('assert.d', (mod.ddd or {})[-1])
        assert.is_true(mod.dd)
        assert.is_true(mod.d)

        assert.equal('testdata/assert.d', mod.node)
        assert.equal('testdata/assert', mod.id)
      end)
    end)
  end)
  it(".isroot", function()
    assert.is_true(module('meta').isroot)
    assert.is_nil(module('meta.loader').isroot)
    assert.is_nil(module('testdata/init1/file').isroot)
    assert.is_nil(module('testdata/init1/dir').isroot)
    assert.is_nil(module('testdata/init1/dirinit').isroot)
    assert.is_nil(module('testdata/init1/filedir').isroot)
    assert.is_nil(module('testdata/init1/all').isroot)

    assert.is_nil(module('init2').isroot)
    assert.is_nil(module('init2.file').isroot)
    assert.is_nil(module('init2.dir').isroot)
    assert.is_nil(module('init2.dirinit').isroot)
    assert.is_nil(module('init2.filedir').isroot)
    assert.is_nil(module('init2.all').isroot)
  end)
  it(".parent", function()
    assert.equal(module('meta'), module('meta.loader').parent)
    assert.equal(module('meta'), module('meta.loader').parent)
  end)
  it(".sub()", function()
    assert.same(module('meta/loader').name, (module('meta') .. 'loader').name)
    assert.equal(module('meta/loader').name, (module('meta') .. 'loader').name)
    assert.equal(module('meta/loader'), (module('meta') .. 'loader'))
    assert.equal(module('testdata/loader/noneexistent'), (module('testdata/loader') .. 'noneexistent'))
  end)
  it(".load ok and test mcache", function()
    local m = module('testdata/loader/ok/message')
    assert.truthy(m.exists)
    assert.is_table(m.load)
    assert.is_nil(m.error)
    assert.equal('ok', m.get.data)
    assert.truthy(m.loaded)
  end)
  it(".load failed", function()
    local m = module('testdata.loader.failed')
    assert.truthy(m.exists)
    call.protect = false;
    assert.has_error(function() return m.req end);
    call.protect = true
  end)
  it("__mul", function()
    local mod = module('testdata/init1')

    assert.keys({'file', 'all', 'dirinit', 'filedir', 'dir'}, mod.modz, '3')
    assert.keys({'file', 'all', 'dirinit', 'filedir', 'dir'}, mod*function(v,k) return v.k end)
  end)
  it("loader", function()
    local mod = module('testdata/init1')
    assert.is_table(mod)
    assert.is_table(mod.loader)

    mod = module('testdata.init3')
    assert.is_table(mod)
    assert.is_table(mod.loader)
    assert.same({a={ok='ok'}, b={ok='ok'}, c={ok='ok'}, d={ok='ok'}}, mod.loader)
  end)
  it(".pkg", function()
    assert.equal(module('testdata/init1'), module:pkg('testdata/init1/file'))
    assert.is_nil(module:pkg('testdata/init1/dir'))

    assert.equal(module('testdata/init1/dirinit'), module:pkg('testdata/init1/dirinit'))
    assert.equal(module('testdata/init1/filedir'), module:pkg('testdata/init1/filedir'))
    assert.equal(module('testdata/init1/all'), module:pkg('testdata/init1/all'))

    assert.equal(module('testdata/init2'), module:pkg('testdata.init2'))
    assert.equal(module('testdata/init2'), module:pkg('testdata.init2.file'))
    assert.is_nil(module:pkg('testdata.init2.dir'))

    assert.equal(module('testdata/init2/dirinit'), module:pkg('testdata.init2.dirinit'))
    assert.equal(module('testdata/init2/filedir'), module:pkg('testdata.init2.filedir'))
    assert.equal(module('testdata/init2/all'), module:pkg('testdata.init2.all'))
  end)
  it("searcher values always same", function()
    local searcher, load = module.searcher, module.loadproc
    assert.is_function(searcher)

    assert.equal(module('meta.iter').name, module('meta/iter').name)
    assert.equal(searcher('meta/iter'), searcher('meta.iter'))
    assert.ends('lua/meta/iter.lua', searcher('meta/iter'))
    assert.ends('lua/meta/iter.lua', searcher('meta.iter'))

    assert.equal(load('meta/iter'), module('meta/iter').loadfunc)
    assert.equal(load('meta.iter'), module('meta.iter').loadfunc)

    _ = load('meta/iter')
    _ = load('meta.iter')

    assert.truthy(package.loaded['meta.iter'])
    assert.equal(load('meta.iter'), module('meta.iter').loadfunc)
    assert.falsy(package.loaded['meta/iter'])

    require 'meta/iter'
    require 'meta.iter'

    assert.truthy(package.loaded['meta.iter'])
    assert.truthy(package.loaded['meta/iter'])
    assert.equal(package.loaded['meta.iter'], package.loaded['meta/iter'])

    assert.equal(load('meta/iter'), module('meta/iter').loadfunc)
    assert.equal(load('meta.call'), module('meta.call').loadfunc)
    assert.equal(load('meta.table'), module('meta.table').loadfunc)

    assert.equal(load('meta.iter'), module('meta.iter').loadfunc)
    assert.equal(load('meta/call'), module('meta.call').loadfunc)
    assert.equal(load('meta/table'), module('meta.table').loadfunc)

    assert.equal(load('meta/iter'), module('meta/iter').loadfunc)
    assert.equal(load('meta/call'), module('meta/call').loadfunc)
    assert.equal(load('meta/table'), module('meta/table').loadfunc)

    assert.equal(load('inspect'), module('inspect').loadfunc)
    assert.is_nil(load('noneexistent'))
  end)
end)