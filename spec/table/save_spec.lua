describe("table.save", function()
  local meta, is
  setup(function()
    meta = require "meta"
    is = meta.is
  end)
  it("meta", function()
    assert.truthy(is)
    assert.truthy(is.callable(table.save))
  end)
  it("positive", function()
    local o = {}
    local save = function(t, k, v) table.save(t, k, v); return t end
    assert.same({a='b'}, save(o, 'a', 'b'))
    assert.same({a='a'}, save(o, 'a', 'a'))
    assert.same({a='a'}, save(o, 'a', nil))
    assert.same({a='b'}, save(o, 'a', 'b'))
    assert.same({a='b',x='y'}, save(o, 'x', 'y'))
    assert.same({a='b',x='y'}, save(o, 'a', 'b'))

    assert.equal('b',   table.save(o, 'a', 'b'))
    assert.equal(nil,   table.save(o, 'a', nil))
    assert.equal('a',   table.save(o, 'a', 'a'))

    assert.equal(true,  table.save(o, 'a', true))
    assert.equal(nil,   table.save(o, 'a', nil))
    assert.equal(false, table.save(o, 'a', false))
  end)
  it("negative", function()
    assert.is_nil(table.save(''))
    assert.is_nil(table.save({}))
    assert.is_nil(table.save(0))
    assert.is_nil(table.save(1))
    assert.is_nil(table.save(false))
    assert.is_nil(table.save(true))
  end)
  it("nil", function()
    assert.is_nil(table.save())
    assert.is_nil(table.save(nil))
    assert.is_nil(table.save(nil, nil))
    assert.is_nil(table.save(nil, nil, nil))
    assert.is_nil(table.save({}, nil, nil))
    assert.is_nil(table.save({}, {}, nil))
    assert.is_nil(table.save(nil, {}, nil))
    assert.is_nil(table.save(nil, {}, {}))
    assert.is_nil(table.save(nil, nil, {}))
  end)
end)