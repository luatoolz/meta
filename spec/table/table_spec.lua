describe("table", function()
  local iter, is
  setup(function()
    require "meta"
    iter = require 'meta.iter'
    is = require 'meta.is'
  end)
  it("mt", function()
    assert.is_table(table)
    local mt = getmetatable(table())
    assert.is_table(mt)
    assert.same(mt, getmetatable(table()))
    assert.same(mt, getmetatable(table({})))
    assert.same(mt, getmetatable(table({"a"})))
    assert.same(mt, getmetatable(table("a")))
  end)
  it("new", function()
    assert.same(table {}, table())
    assert.same(table {}, table(nil))
    assert.same(table {}, table({nil}))
    assert.same(table {"x"}, table({"x"}))
    assert.same(table {"x"}, table("x"))
    assert.same(table {"x", "y"}, table({"x", "y"}))
    assert.same(table {"x", "y"}, table("x", "y"))
    assert.same(table {a="x"}, table({a="x"}))
  end)
  it("insert()", function()
    local o = table({"x", "y"})
    assert.is_function(table.append)
    assert.is_nil(table.insert(o, nil))
    assert.is_table(table.append(o, "q"))
    assert.same(table {"x", "y", "q"}, o)
  end)
  it("remove()", function()
    local r = table {"x", "y", "z"}
    assert.same("z", table.remove(r))
    assert.same("y", table.remove(r, 2))
    assert.same(table {"x"}, r)
  end)
  it("maxi", function()
    local maxi = require 'meta.table.maxi'
    assert.is_nil(maxi())
    assert.equal(2, maxi({"x", "y"}))
    assert.equal(2, maxi(table {"x", "y"}))
    assert.equal(0, maxi(table {}))
    assert.equal(1, maxi(table {"a"}))
    assert.equal(3, maxi(table {"a", nil, "x"}))
    assert.equal(3, maxi({"a", nil, "x", a=1}))
    assert.equal(3, maxi({b=2, "a", nil, "x", a=1}))
    assert.equal(4, maxi({b=2, "a", nil, nil, "x", a=1}))
    assert.equal(5, maxi({b=2, "a", nil, nil, nil, "x", a=1}))

    assert.equal(2, #{"x", "y"})
    assert.equal(2, #table {"x", "y"})
    assert.equal(0, #table {})
    assert.equal(1, #table {"a"})
    assert.equal(maxi{"a", "x"}, #table {"a", "x"})
    assert.is_true(maxi{"a", nil, "x"} >= #table {"a", nil, "x"})
    assert.is_true(maxi{"a", nil, "x", a=1} >= #{"a", nil, "x", a=1})
    assert.is_true(maxi{b=2, "a", nil, "x", a=1} >= #{b=2, "a", nil, "x", a=1})

    local rv = {}
    local o = {b=2, "a", nil, nil, nil, "x", a=1}
    for i=1,maxi(o) do if type(o[i])~='nil' then rv[#rv+1]=o[i] end end
    assert.same({"a", "x"}, rv)
  end)
  it("empty", function()
    assert.is_nil(table.empty())
    assert.is_true(table.empty({}))
    assert.is_true(table.empty({nil}))
    assert.is_nil(table.empty({"x"}))
    assert.is_nil(table.empty({a="x"}))
  end)
  it("indexed", function()
    assert.is_nil(table.indexed())
    assert.is_true(table.indexed({"x", "y"}))
    assert.is_true(table.indexed(table {"x", "y"}))
    assert.is_false(table.indexed(table {}))
    assert.is_true(table.indexed(table {"a"}))
    assert.is_true(table.indexed(table {"a", nil, "x"}))
    assert.is_true(table.indexed({"a", nil, "x", a=1}))
    assert.is_true(table.indexed({b=2, "a", nil, "x", a=1}))
    assert.is_false(table.indexed({b=2}))
    assert.is_false(table.indexed({b=2, a=1}))
  end)
  it("unindexed", function()
    assert.is_nil(table.unindexed())
    assert.is_false(table.unindexed({"x", "y"}))
    assert.is_false(table.unindexed(table {"x", "y"}))
    assert.is_false(table.unindexed(table {}))
    assert.is_false(table.unindexed(table {"a"}))
    assert.is_false(table.unindexed(table {"a", nil, "x"}))
    assert.is_false(table.unindexed({"a", nil, "x", a=1}))
    assert.is_false(table.unindexed({b=2, "a", nil, "x", a=1}))
    assert.is_true(table.unindexed({b=2}))
    assert.is_true(table.unindexed({b=2, a=1}))
  end)
--  it("reverse()", function()
--    assert.same(table {}, table {}:reversed())
--    assert.same(table {"x"}, table {"x"}:reversed())
--    assert.same(table {"y", "x"}, table {"x", "y"}:reversed())
--    assert.same(table {"z", "y", "x"}, table {"x", "y", "z"}:reversed())
--    assert.same(table {"q", "a", "y", "x"}, table {"x", "y", "a", "q"}:reversed())
--    assert.same(table {"w", "q", "a", "y", "x"}, table {"x", "y", "a", "q", "w"}:reversed())
--  end)
  it("any", function()
    assert.is_nil(table.any())
    assert.is_nil(table.any({}))
    assert.is_nil(table.any(table {}))
    assert.is_nil(table.any(table(), "x"))
    assert.is_nil(table.any({}, "x"))
    assert.truthy(table.any({"x"}, "x"))
    assert.truthy(table.any({"x", "x", "x"}, "x"))
    assert.truthy(table.any({"y", "x", "x"}, "x"))
    assert.truthy(table.any({"y", "z", "x"}, "x"))
    assert.truthy(table.any({"x", "y", "z"}, "x"))
    assert.is_nil(table.any({"x", "y", "z"}, "q"))
    assert.is_nil(table.any({"x", "y", "z"}, nil))
    assert.is_nil(table.any({"x", "y", "z"}))
    assert.truthy(table.any({"y", "z", "x", "t"}, {"x", "t"}))
    assert.truthy(table.any({"y", "z", "x", "t"}, {"x", "t"}))
  end)
  it("all", function()
    assert.is_true(table.all())
    assert.is_true(table.all(table()))
    assert.is_true(table.all(table {}))
    assert.is_nil( table.all(table(), "x"))
    assert.is_nil( table.all(table {}, "x"))
    assert.is_true(table.all({"x"}, "x"))
    assert.is_true(table.all({"x", "x", "x"}, "x"))
    assert.is_true(table.all({"x", "y", "z"}, "x"))
    assert.is_nil( table.all({"x", "y", "z"}, "q"))
    assert.is_true(table.all({"x", "y", "z"}, nil))
    assert.is_true(table.all({"x", "y", "z"}))
    assert.is_nil( table.all({"x", "y", "y", "x", "y"}, "x", "z", "y"))
    assert.is_true(table.all({"x", "y", "z"}, "x", "z", "y"))
    assert.is_nil( table.all({"x", "y", "z"}, "x", "z", "y", "t"))
    assert.is_true(table.all({"x", "y", "z", "t"}, "x", "z", "y"))
  end)
  it("append_unique()", function()
    assert.same(table {"z"}, table.append_unique(table {}, "z"))
    assert.same(table {"z"}, table.append_unique(table.append_unique(table {}, "z"), "z"))
    assert.same(table {"x", "y", "z"}, table.append_unique(table {"x", "y"}, "z"))
    assert.same(table {"x", "y"}, table.append_unique(table {"x", "y"}, nil))
    assert.same(table {"x", "y"}, table.append_unique(table {"x", "y"}))

    assert.same({"z"}, table.append_unique({}, "z"))
    assert.same({"z"}, table.append_unique(table.append_unique({}, "z", "z")))
    assert.same({"x", "y", "z"}, table.append_unique({"x", "y"}, "z"))
    assert.same({"x", "y"}, table.append_unique({"x", "y"}, nil))
    assert.same({"x", "y"}, table.append_unique({"x", "y"}))

    assert.same(table {1}, table.append_unique(table {1}, 1))
    assert.same(table {1, 2}, table.append_unique(table {1, 2}, 1))
    assert.same(table {1, 2, 3}, table.append_unique(table {1, 2}, 3))
  end)
  it("append()", function()
    assert.same(table {"x", "y", "z"}, table.append(table {"x", "y"}, "z"))
    assert.same(table {"x", "y", "z", "z"}, table.append(table.append(table {"x", "y"}, "z"), "z"))
    assert.same(table {"x", "y"}, table.append(table {"x", "y"}, nil))
    assert.same(table {"x", "y"}, table.append(table {"x", "y"}))
    assert.same(table {}, table.append(table {}, nil))
    assert.same(table {}, table.append(table {}))
  end)
  describe("update", function()
    it("nil", function()
      local t = table {a="x", b="y", c="z"}
      local y = table.clone(t)
      assert.is_nil(table.update())
      assert.is_nil(table.update(nil))
      assert.is_nil(table.update(nil, nil))

      assert.same(y, table.update(t))
      assert.same(y, table.update(t, nil))
      assert.same(y, table.update(t, {}))
    end)
    it("valid values", function()
      assert.same({a="x", b="y", c="z"}, table.update(table(), {a="x", b="y", c="z"}))
      assert.same({a="x", b="y", c="z"}, table.update(table({}), {a="x", b="y", c="z"}))

      assert.same({a="x", b="y", c="z"}, table.update(table({a='x'}), {a="x", b="y", c="z"}, {c='z'}))
      assert.same({a="xx", b="y", c="z"}, table.update(table({a='xx'}), {a="x", b="y", c="z"}, {c='zz'}))

      assert.same({a="x", b="y", c="z", d='t'}, table.update({a="x", b="y", c="z"}, {d='t'}))
      assert.same({a="x", b="y", c="z", d='t'}, table.update(table.update({a="x", b="y", c="z"}, {d='t'}), {d='d'}))
      assert.same({"x", "y", "z", "t"}, table.update({"x", "y", "z"}, {"t"}))
    end)
  end)
  it("tohash", function()
    assert.same({}, table.hashed(table()))
    assert.same({}, table.hashed(table {}))
    assert.same({x=true}, table.hashed(table {"x"}))
    assert.same({x=true}, table.hashed(table {"x", "x"}))
    assert.same({x=true, y=true}, table.hashed(table {"x", "y", "x"}))
    assert.same({x=true, y=true, z=true}, table.hashed(table {"z", "y", "x"}))

    assert.same({x=1}, table.hashed(table {"x"}, 1))
  end)
  it("uniq", function()
    assert.same({}, table.uniq(table {}))
    assert.same({1}, table.uniq(table {1}))
    assert.same({1}, table.uniq(table {1, 1}))
    assert.same({1, 2}, table.uniq(table {1, 1, 2, 2}))
    assert.same({1, 2}, table.uniq(table {1, 2, 1, 2, 1, 2}))
    assert.same({'a', 'b'}, table.uniq(table {'a', 'b', 'a'}))
    assert.same({'a', 'b'}, table.uniq(table {'a', 'b', 'b'}))
  end)
  it("null", function()
    assert.is_nil(table.nulled(table {}))
    assert.same({1}, table.nulled(table {1}))
    assert.same({1, 1}, table.nulled(table {1, 1}))
    assert.same({'a'}, table.nulled(table {'a'}))
    assert.same({'a', 'b'}, table.nulled(table {'a', 'b'}))
  end)
  it("__add / multi add", function()
    assert.same(table {"x", "y", "a"}, table {"x", "y"} + "a")
    assert.same(table {"x", "y", "a", "b"}, table {"x", "y"} + "a" + "b")
  end)
  it("__concat / multi concat", function()
    assert.same(table({"x", "y", "a", "b", "c"}), table({"x", "y"}) .. table({"a", "b"}) .. table({"c"}))
    assert.same(table {"x", "y", "a", "b"}, table {"x", "y"} .. table {"a", "b"})
    assert.same(table {"x", "y", a={}}, table {"x", "y"} .. table {a={}})
    assert.same(table {"x", "y", __a='AAA'}, table({"x", "y", __a='AAA'}) .. table({__a='BBB'}))
    assert.same(table {"x", "y", "a", "b"}, table {"x", "y"} .. iter(table {"a", "b"}))
  end)
  describe("__eq", function()
    it("table", function()
      assert.is_true(table({"x", "y", "a", "b", "c"}) == table({"x", "y", "a", "b", "c"}), '1')
      assert.same(table({"x", "y", "a", "b", "c"}), (table({"x", "y"}) .. table({"a", "b"}) .. table({"c"})), '1')
      assert.is_true(table {"x", "y", "a", "b"} == (table({"x", "y"}) .. table({"a", "b"})), '2')
      assert.same(table({"x", "y", a={}}), (table {"x", "y"} .. table {a={}}), '3')

      assert.equal(table({"x", "y", "a", "b", "c"}), table({"x", "y", "a", "b", "c"}), '4')
      assert.same(table({"x", "y", "a", "b", "c"}), {"x", "y", "a", "b", "c"}, '5')
    end)
  end)
  it("preserve", function()
    local preserve = require 'meta.table.preserve'
    assert.is_true(is.like(table(), preserve(table())))
    assert.is_true(is.like(table(), preserve({})))
    assert.is_true(is.like(table(), preserve()))
    assert.is_true(is.like(table(), preserve(string.lower)))

    assert.is_nil(is.like(table(), preserve({},{})))
    assert.is_truthy(is.like(table(), preserve(iter)))
  end)
  it("__index", function()
    assert.same({}, table()[{}])
    assert.same({}, table()[{'a'}])

    assert.same({}, table({a='A'})[{}])
    assert.same({a='A'}, table({a='A'})[{'a'}])
  end)
end)