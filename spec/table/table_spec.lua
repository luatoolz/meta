describe("table", function()
  local iter
  setup(function()
    require "meta"
    iter = require 'meta.iter'
  end)
  it("mt", function()
    assert.is_table(table)
    local mt = getmetatable(table())
    assert.is_table(mt)
    assert.same(mt, getmetatable(table()))
    assert.same(mt, getmetatable(table({})))
    assert.same(mt, getmetatable(table({"a"})))
    assert.same(mt, getmetatable(table("a")))
  end)
  it("new", function()
    assert.same(table {}, table())
    assert.same(table {}, table(nil))
    assert.same(table {}, table({nil}))
    assert.same(table {"x"}, table({"x"}))
    assert.same(table {"x"}, table("x"))
    assert.same(table {"x", "y"}, table({"x", "y"}))
    assert.same(table {"x", "y"}, table("x", "y"))
    assert.same(table {a="x"}, table({a="x"}))
  end)
  it("insert()", function()
    local o = table({"x", "y"})
    assert.is_function(table.append)
    assert.is_function(o.append)
    assert.equal(table.append, o.append)
    assert.is_nil(table.insert(o, nil))
    assert.is_table(o:append("q"))
    assert.same(table {"x", "y", "q"}, o)
  end)
  it("remove()", function()
    local r = table {"x", "y", "z"}
    assert.same("z", r:remove())
    assert.same("y", r:remove(2))
    assert.same(table {"x"}, r)
  end)
  it("maxi", function()
    local maxi = require 'meta.table.maxi'
    assert.is_nil(maxi())
    assert.equal(2, maxi({"x", "y"}))
    assert.equal(2, maxi(table {"x", "y"}))
    assert.equal(0, maxi(table {}))
    assert.equal(1, maxi(table {"a"}))
    assert.equal(3, maxi(table {"a", nil, "x"}))
    assert.equal(3, maxi({"a", nil, "x", a=1}))
    assert.equal(3, maxi({b=2, "a", nil, "x", a=1}))
    assert.equal(4, maxi({b=2, "a", nil, nil, "x", a=1}))
    assert.equal(5, maxi({b=2, "a", nil, nil, nil, "x", a=1}))

    assert.equal(2, #{"x", "y"})
    assert.equal(2, #table {"x", "y"})
    assert.equal(0, #table {})
    assert.equal(1, #table {"a"})
    assert.equal(maxi{"a", "x"}, #table {"a", "x"})
    assert.is_true(maxi{"a", nil, "x"} >= #table {"a", nil, "x"})
    assert.is_true(maxi{"a", nil, "x", a=1} >= #{"a", nil, "x", a=1})
    assert.is_true(maxi{b=2, "a", nil, "x", a=1} >= #{b=2, "a", nil, "x", a=1})

    local rv = {}
    local o = {b=2, "a", nil, nil, nil, "x", a=1}
    for i=1,maxi(o) do if type(o[i])~='nil' then rv[#rv+1]=o[i] end end
    assert.same({"a", "x"}, rv)
  end)
  it("empty", function()
    assert.is_nil(table.empty())
    assert.is_true(table.empty({}))
    assert.is_true(table.empty({nil}))
    assert.is_nil(table.empty({"x"}))
    assert.is_nil(table.empty({a="x"}))
  end)
  it("indexed", function()
    assert.is_nil(table.indexed())
    assert.is_true(table.indexed({"x", "y"}))
    assert.is_true(table.indexed(table {"x", "y"}))
    assert.is_false(table.indexed(table {}))
    assert.is_true(table.indexed(table {"a"}))
    assert.is_true(table.indexed(table {"a", nil, "x"}))
    assert.is_true(table.indexed({"a", nil, "x", a=1}))
    assert.is_true(table.indexed({b=2, "a", nil, "x", a=1}))
    assert.is_false(table.indexed({b=2}))
    assert.is_false(table.indexed({b=2, a=1}))
  end)
  it("unindexed", function()
    assert.is_nil(table.unindexed())
    assert.is_false(table.unindexed({"x", "y"}))
    assert.is_false(table.unindexed(table {"x", "y"}))
    assert.is_false(table.unindexed(table {}))
    assert.is_false(table.unindexed(table {"a"}))
    assert.is_false(table.unindexed(table {"a", nil, "x"}))
    assert.is_false(table.unindexed({"a", nil, "x", a=1}))
    assert.is_false(table.unindexed({b=2, "a", nil, "x", a=1}))
    assert.is_true(table.unindexed({b=2}))
    assert.is_true(table.unindexed({b=2, a=1}))
  end)
  it("reverse()", function()
    assert.same(table {}, table {}:reversed())
    assert.same(table {"x"}, table {"x"}:reversed())
    assert.same(table {"y", "x"}, table {"x", "y"}:reversed())
    assert.same(table {"z", "y", "x"}, table {"x", "y", "z"}:reversed())
    assert.same(table {"q", "a", "y", "x"}, table {"x", "y", "a", "q"}:reversed())
    assert.same(table {"w", "q", "a", "y", "x"}, table {"x", "y", "a", "q", "w"}:reversed())
  end)
  it("any", function()
    assert.is_nil(table.any())
    assert.is_nil(table():any())
    assert.is_nil(table {}:any())
    assert.is_nil(table():any("x"))
    assert.is_nil(table {}:any("x"))
    assert.truthy(table {"x"}:any("x"))
    assert.truthy(table {"x", "x", "x"}:any("x"))
    assert.truthy(table {"y", "x", "x"}:any("x"))
    assert.truthy(table {"y", "z", "x"}:any("x"))
    assert.truthy(table {"x", "y", "z"}:any("x"))
    assert.is_nil(table {"x", "y", "z"}:any("q"))
    assert.is_nil(table {"x", "y", "z"}:any(nil))
    assert.is_nil(table {"x", "y", "z"}:any())
    assert.truthy(table {"y", "z", "x", "t"}:any("x", "t"))
    assert.truthy(table {"y", "z", "x", "t"}:any({"x", "t"}))
  end)
  it("all", function()
    assert.is_true(table.all())
    assert.is_true(table():all())
    assert.is_true(table {}:all())
    assert.is_nil(table():all("x"))
    assert.is_nil(table {}:all("x"))
    assert.is_true(table {"x"}:all("x"))
    assert.is_true(table {"x", "x", "x"}:all("x"))
    assert.is_true(table {"x", "y", "z"}:all("x"))
    assert.is_nil(table {"x", "y", "z"}:all("q"))
    assert.is_true(table {"x", "y", "z"}:all(nil))
    assert.is_true(table {"x", "y", "z"}:all())
    assert.is_nil(table {"x", "y", "y", "x", "y"}:all("x", "z", "y"))
    assert.is_true(table {"x", "y", "z"}:all("x", "z", "y"))
    assert.is_nil(table {"x", "y", "z"}:all("x", "z", "y", "t"))
    assert.is_true(table {"x", "y", "z", "t"}:all("x", "z", "y"))
  end)
  it("append_unique()", function()
    assert.same(table {"z"}, table {}:append_unique("z"))
    assert.same(table {"z"}, table {}:append_unique("z"):append_unique("z"))
    assert.same(table {"x", "y", "z"}, table {"x", "y"}:append_unique("z"))
    assert.same(table {"x", "y"}, table {"x", "y"}:append_unique(nil))
    assert.same(table {"x", "y"}, table {"x", "y"}:append_unique())

    assert.same({"z"}, table.append_unique({}, "z"))
    assert.same({"z"}, table.append_unique(table.append_unique({}, "z", "z")))
    assert.same({"x", "y", "z"}, table.append_unique({"x", "y"}, "z"))
    assert.same({"x", "y"}, table.append_unique({"x", "y"}, nil))
    assert.same({"x", "y"}, table.append_unique({"x", "y"}))

    assert.same(table {1}, table {1}:append_unique(1))
    assert.same(table {1, 2}, table {1, 2}:append_unique(1))
    assert.same(table {1, 2, 3}, table {1, 2}:append_unique(3))
  end)
  it("append()", function()
    assert.same(table {"x", "y", "z"}, table {"x", "y"}:append("z"))
    assert.same(table {"x", "y", "z", "z"}, table {"x", "y"}:append("z"):append("z"))
    assert.same(table {"x", "y"}, table {"x", "y"}:append(nil))
    assert.same(table {"x", "y"}, table {"x", "y"}:append())
    assert.same(table {}, table {}:append(nil))
    assert.same(table {}, table {}:append())
  end)
  describe("update", function()
    it("nil", function()
      local t = table {a="x", b="y", c="z"}
      local y = table.clone(t)
      assert.is_nil(table.update())
      assert.is_nil(table.update(nil))
      assert.is_nil(table.update(nil, nil))

      assert.same(y, t:update())
      assert.same(y, t:update(nil))
      assert.same(y, t:update({}))
    end)
    it("valid values", function()
      assert.same({a="x", b="y", c="z"}, table():update({a="x", b="y", c="z"}))
      assert.same({a="x", b="y", c="z"}, table({}):update({a="x", b="y", c="z"}))

      assert.same({a="x", b="y", c="z"}, table({a='x'}):update({a="x", b="y", c="z"}, {c='z'}))
      assert.same({a="x", b="y", c="zz"}, table({a='xx'}):update({a="x", b="y", c="z"}, {c='zz'}))

      assert.same({a="x", b="y", c="z", d='t'}, table({a="x", b="y", c="z"}):update({d='t'}))
      assert.same({a="x", b="y", c="z", d='d'}, table({a="x", b="y", c="z"}):update({d='t'}):update({d='d'}))
      assert.same({"x", "y", "z", "t"}, table({"x", "y", "z"}):update({"t"}))
    end)
  end)
  it("tohash", function()
    assert.same({}, table():hashed())
    assert.same({}, table {}:hashed())
    assert.same({x=true}, table {"x"}:hashed())
    assert.same({x=true}, table {"x", "x"}:hashed())
    assert.same({x=true, y=true}, table {"x", "y", "x"}:hashed())
    assert.same({x=true, y=true, z=true}, table {"z", "y", "x"}:hashed())

    assert.same({x=1}, table {"x"}:hashed(1))
  end)
  it("uniq", function()
    assert.same({}, table {}:uniq())
    assert.same({1}, table {1}:uniq())
    assert.same({1}, table {1, 1}:uniq())
    assert.same({1, 2}, table {1, 1, 2, 2}:uniq())
    assert.same({1, 2}, table {1, 2, 1, 2, 1, 2}:uniq())
    assert.same({'a', 'b'}, table {'a', 'b', 'a'}:uniq())
    assert.same({'a', 'b'}, table {'a', 'b', 'b'}:uniq())
  end)
  it("null", function()
    assert.is_nil(table {}:nulled())
    assert.same({1}, table {1}:nulled())
    assert.same({1, 1}, table {1, 1}:nulled())
    assert.same({'a'}, table {'a'}:nulled())
    assert.same({'a', 'b'}, table {'a', 'b'}:nulled())
  end)
  it("__add / multi add", function()
    assert.same(table {"x", "y", "a"}, table {"x", "y"} + "a")
    assert.same(table {"x", "y", "a", "b"}, table {"x", "y"} + "a" + "b")
  end)
  it("__concat / multi concat", function()
    assert.same(table({"x", "y", "a", "b", "c"}), table({"x", "y"}) .. table({"a", "b"}) .. table({"c"}))
    assert.same(table {"x", "y", "a", "b"}, table {"x", "y"} .. table {"a", "b"})
    assert.same(table {"x", "y", a={}}, table {"x", "y"} .. table {a={}})
    assert.same(table {"x", "y", __a='BBB'}, table({"x", "y", __a='AAA'}) .. table({__a='BBB'}))
    assert.same(table {"x", "y", "a", "b"}, table {"x", "y"} .. iter(table {"a", "b"}))
--    local swap = require 'meta.fn.swap'
--    assert.equal('', (table() .. package.loaded)*function(v,k) return k,nil end*tostring)
-- % string.matcher('^testdata'))
--)%string.matcher('^testdata'))
--function(v,k) return k:match('^testdata.') end)
  end)
  describe("__eq", function()
    it("table", function()
      assert.is_true(table({"x", "y", "a", "b", "c"}) == table({"x", "y", "a", "b", "c"}), '1')
      assert.same(table({"x", "y", "a", "b", "c"}), (table({"x", "y"}) .. table({"a", "b"}) .. table({"c"})), '1')
      assert.is_true(table {"x", "y", "a", "b"} == (table({"x", "y"}) .. table({"a", "b"})), '2')
      assert.same(table({"x", "y", a={}}), (table {"x", "y"} .. table {a={}}), '3')
    end)
  end)
end)