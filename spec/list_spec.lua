describe("list", function()
  local meta, number, list, map, tuple, array
  setup(function()
    meta = require 'meta'
    number= meta.number
    list = meta.list
    map   = table.map
    tuple = meta.tuple
    array = meta.array
  end)
  it("__pairs", function()
    assert.equal(list('a', 'b', 'c'), list('a', 'b', 'c'))
    assert.equal(list('a', 'b', 'c'), list(map(list('a', 'b', 'c'))))
    assert.equal(list('a', 'b', 'c'), list(map(list('a', 'b', 'c'))))
    assert.same(list('a', 'b', 'c'), map(list('a', 'b', 'c')))
    assert.equal(list('a', 'b', 'c'), list('a', 'b', 'c') * tuple.noop)
  end)
  describe("create", function()
    it("nil", function()
      assert.is_table(list())
      assert.is_table(list({}))
      assert.same(list(), list({}))
      assert.is_nil(list()['a'])
      assert.is_nil(list()[''])
      assert.is_nil(list()[1])
      assert.is_nil(list()[nil])
    end)
    it("nil operations", function()
      assert.equal(list(), list() .. list())
      assert.equal(list(), list() + list())
      assert.equal(list(), list() - list())
      assert.equal(list(), list() * nil)
      assert.equal(true, list() == list())
    end)
    it("1+nil operations", function()
      assert.equal(list('a'), list('a') + list())
      assert.equal(list('a'), list('a') + list('a'))
      assert.equal(list('a'), list() + list('a'))
      assert.equal(list('a'), list('a') .. list())
      assert.equal(list('a'), list('a') .. list('a'))
      assert.equal(list('a'), list() .. list('a'))
      assert.equal(list('a'), list('a') - list())
      assert.equal(list(), list('a') - list(1))
    end)
    it("1+1+nil operations", function()
      assert.equal(list('a', 'b'), list('a') + list('b'))
      assert.equal(list('b', 'a'), list('b') + list('a'))
      assert.equal(list('a', 'b'), list('a') .. list('b'))
      assert.equal(list('b', 'a'), list('b') .. list('a'))
      assert.equal(list('a', 'b'), list('a', 'b') - list())
      assert.equal(list('b'), list('a', 'b') - list(1))
      assert.equal(list('a'), list('a', 'b') - list(2))
    end)
    it("2+ operations", function()
      assert.equal(list('a', 'b'), list('a', 'b') + list('b', 'a'))
      assert.equal(list('b', 'a'), list('b', 'a') + list('a', 'b'))
      assert.equal(list('a', 'b'), list('a', 'b') .. list('b', 'a'))
      assert.equal(list('b', 'a'), list('b', 'a') .. list('a', 'b'))
      assert.equal(list('a', 'b'), list('a', 'b') - list())
      assert.equal(list('b'), list('a', 'b') - list(1))
      assert.equal(list('b'), list('a', 'b') - 1)
      assert.equal(list('b'), list('a', 'b') - list(1, 1))
      assert.equal(list(), list('a', 'b') - array(1, 1))
      assert.equal(list(), list('a', 'b') - list(2, 1))
      assert.equal(list('b'), list('a', 'b') - list(1, 2))
      assert.equal(list('a'), list('a', 'b') - list(2, 2))
      assert.equal(list('a'), list('a', 'b') - array(2, 2))
    end)
  end)
  it("regular operations", function()
    assert.same(list('a', 'b', 'c'), map(list('a', 'b', 'c')))
    assert.is_function(tuple.noop)
    assert.equal('a', list('a')[1])
    assert.is_table(list('a', 'b'))
  end)
  it("compare", function()
    assert.is_true(list('a', 'b', 'c', 'd') == list('a', 'b', 'c', 'd'))
    assert.is_true(list('a', 'd', 'b', 'c') ~= list('a', 'b', 'c', 'd'))
  end)
  it("map", function()
    assert.equal(list(2, 14, 176), list('1', '7', '88') * function(x) return number(x)*2 end)
    assert.equal(list('2', '14', '176'), list('2', '14', '176'))
    assert.equal(list('1', '7', '88'), list(1, 7, 88)*tostring)
    assert.equal(88, number('88'))
    assert.equal(list(1, 7, 88), list('1', '7', '88')*number)
  end)
  it("filter", function()
    assert.same(list('88'), list('1', '7', '88') % function(x) return number(x)>50 end)
  end)
  it("__tostring", function()
    assert.equal('1\n7\n88', tostring(list('1', '7', '88')))
  end)
  -- test of elements auto typing
  it("typed elements", function()
    assert.equal(list('2', '14', '176'), list('2', '14', '176') + 12)
    assert.equal(list(1, 7, 88), list(1, 7, 88) + 'some')
  end)
end)