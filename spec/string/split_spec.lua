describe("string.split", function()
	local meta, is
	setup(function()
    meta = require "meta"
    is = meta.is
	end)
  it("meta", function()
    assert.truthy(is)
    assert.truthy(is.callable(string.split))
  end)
  it("positive", function()
    assert.same({"1,2"}, ('1,2'):split())
    assert.same({"1,2"}, ('1,2'):split(nil))
    assert.same({"1", ",", "2", " ", "3"}, ('1,2 3'):split(''))
    assert.same({"1", "2"}, ('1,2'):split(','))
    assert.same({"1", "2 3"}, ('1,2 3'):split(','))
    assert.same({"1", "2", "3"}, ('1, 2, 3'):split(', '))
    assert.same({"1", "2", "3"}, ('1,,2,,3'):split(',,'))
    assert.same({"1", "2", "3"}, ("1a very WIERD mansion!@#$%^&*()2a very WIERD mansion!@#$%^&*()3"):split("a very WIERD mansion!@#$%^&*()"))

    assert.same({"1", "2", "3"}, ('1,,2,,3'):split({','}))
    assert.same({"1", "2", "3"}, ('1%2%3'):split({'%'}))

    assert.same({"1", "2", "3"}, ('1[2[3'):split({'['}))
    assert.same({"1", "2", "3"}, ('1]2]3'):split({']'}))

    assert.same({"1", "2", "3"}, ('1[2[3'):split({'[', ']'}))
    assert.same({"1", "2", "3"}, ('1]2]3'):split({'[', ']'}))

    assert.same({"1", "2"}, ('1,2'):split('/', ','))
    assert.same({"1", "2"}, ('1,2'):split(',', '/'))
    assert.same({"1", "2"}, ('1/2'):split('/', ','))
    assert.same({"1", "2"}, ('1/2'):split(',', '/'))

    assert.same({"1", "2"}, ('1,2'):split({'/', ','}))
    assert.same({"1", "2"}, ('1,2'):split({',', '/'}))
    assert.same({"1", "2"}, ('1/2'):split({'/', ','}))
    assert.same({"1", "2"}, ('1/2'):split({',', '/'}))

    assert.same({"1", "2 3"}, ('1,2 3'):split(',', '/'))
    assert.same({"1", "2 3"}, ('1,2 3'):split('/', ','))
    assert.same({"1", "2 3"}, ('1/2 3'):split(',', '/'))
    assert.same({"1", "2 3"}, ('1/2 3'):split('/', ','))

    assert.same({"1", "2 3"}, ('1,2 3'):split({',', '/'}))
    assert.same({"1", "2 3"}, ('1,2 3'):split({'/', ','}))
    assert.same({"1", "2 3"}, ('1/2 3'):split({',', '/'}))
    assert.same({"1", "2 3"}, ('1/2 3'):split({'/', ','}))

    assert.same({"1", "2", "3"}, ('1,2 3'):split(',', ' '))
    assert.same({"1", "2", "3"}, ('1/2,3'):split(',', '/'))
    assert.same({"1", "2", "3"}, ('1,2 3'):split({',', ' '}))
    assert.same({"1", "2", "3"}, ('1/2,3'):split({',', '/'}))
  end)
  it("negative", function()
    assert.is_nil(string.split(''))
    assert.is_nil(string.split({}))
    assert.is_nil(string.split(0))
    assert.is_nil(string.split(1))
    assert.is_nil(string.split(false))
    assert.is_nil(string.split(true))
  end)
  it("nil", function()
    assert.is_nil(string.split(nil, nil))
    assert.is_nil(string.split(nil))
    assert.is_nil(string.split())
  end)
end)