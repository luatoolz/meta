describe("is.table", function()
	local meta, is
	setup(function()
    meta = require "meta"
    is = require "meta.is"
	end)
  it("meta", function()
    assert.truthy(is)
    assert.equal(is, meta.is)
    assert.equal(is, package.loaded['meta.is'])
    assert.truthy(is.table)
    assert.truthy(is.callable(is.table))

    assert.truthy(rawget(is, 'non'))
    assert.equal(rawget(is, 'non'), rawget(package.loaded['meta.is'], 'non'))
    assert.equal(is.non, package.loaded['meta.is'].non)
    assert.is_table(is.table)
    assert.falsy(rawget(is.non, 'table'))
    assert.is_table(is.non.table)
    assert.is_true(is.callable(is.non.table))
    assert.equal(is.non.table, package.loaded['meta.is'].non.table)
    assert.equal(true, is.non.__non)
    assert.equal(getmetatable(is), getmetatable(is.non.table))
  end)
  it("positive", function()
    assert.is_true(is.table({}))
    assert.is_true(is.table({88, 89}))
    assert.is_true(is.table({true}))
    assert.is_true(is.table({a=true}))
    assert.is_true(is.table(table()))

    assert.falsy(not is.table({}))

    assert.is_nil(is.non.table({}))
    assert.is_nil(is.non.table({88, 99}))
  end)
  it("negative", function()
    assert.is_nil(is.table(true))
    assert.is_nil(is.table(false))
    assert.is_nil(is.table(0))
    assert.is_nil(is.table(1))
    assert.is_nil(is.table(''))
    assert.is_nil(is.table('some'))
    assert.is_nil(is.table(string.format))
    assert.is_nil(is.table(meta))
    assert.is_nil(is.table(meta.loader))
  end)
  it("nil", function()
    assert.is_nil(is.table(nil))
    assert.is_nil(is.table())
  end)
end)