describe("module.type", function()
  local meta, is, mcache, tt
  setup(function()
    meta = require "meta"
    is = meta.is
    mcache = meta.mcache
    tt = require 'meta.module.type'
  end)
  it("meta", function()
    assert.truthy(is)
    assert.truthy(is.callable(mcache.type))
  end)
  it("positive", function()
    assert.equal('meta/mcache', tt(meta.mcache))
    assert.equal('meta/loader', tt(meta.loader))
    assert.equal('meta/module', tt(meta.module))
  end)
  it("negative", function()
    assert.is_nil(mcache.type[''])
    assert.is_nil(mcache.type[{}])
    assert.is_nil(mcache.type[0])
    assert.is_nil(mcache.type[false])
    assert.is_nil(mcache.type[true])
  end)
  it("nil", function()
    assert.is_nil(mcache.type[nil])
  end)
  it("loader", function()
    assert.is_table(meta)
    assert.is_table(meta.loader)
    assert.is_table(meta.module)
    assert.is_table(meta.is)
    assert.is_table(meta.mcache)
    assert.is_table(meta.seen)
    assert.is_table(meta.type)
    assert.callable(meta.call)

    assert.equal('meta/loader', tt(meta.loader))
    assert.equal('meta/loader', tt(meta))
    assert.equal('meta/module', tt(meta.module))
    assert.equal('meta/is', tt(meta.is))
    assert.equal('meta/mcache', tt(meta.mcache))
    assert.equal('meta/seen', tt(meta.seen))
    assert.equal('meta/call', tt(meta.call))
    assert.equal('meta/type', tt(meta.type))
  end)
  it("require .", function()
    assert.is_table(require('meta'))
    assert.is_table(require('meta.loader'))
    assert.is_table(require('meta.module'))
    assert.is_table(require('meta.is'))
    assert.is_table(require('meta.mcache'))
    assert.is_table(require('meta.seen'))
    assert.is_table(require('meta.type'))
    assert.callable(require('meta.call'))

    assert.equal('meta/loader', tt(require('meta')))
    assert.equal('meta/loader', tt(require('meta.loader')))
    assert.equal('meta/module', tt(require('meta.module')))
    assert.equal('meta/is', tt(require('meta.is')))
    assert.equal('meta/mcache', tt(require('meta.mcache')))
    assert.equal('meta/seen', tt(require('meta.seen')))
    assert.equal('meta/call', tt(require('meta.call')))
    assert.equal('meta/type', tt(require('meta.type')))
  end)
  it("require /", function()
    assert.is_table(require('meta'))
    assert.is_table(require('meta/loader'))
    assert.is_table(require('meta/module'))
    assert.is_table(require('meta/is'))
    assert.is_table(require('meta/mcache'))
    assert.is_table(require('meta/seen'))
    assert.is_table(require('meta/type'))

    assert.is_true(is.callable(require('meta/call')))

    assert.equal('meta/loader', tt(require('meta')))
    assert.equal('meta/loader', tt(require('meta/loader')))
    assert.equal('meta/module', tt(require('meta/module')))
    assert.equal('meta/is', tt(require('meta/is')))
    assert.equal('meta/mcache', tt(require('meta/mcache')))
    assert.equal('meta/seen', tt(require('meta/seen')))
    assert.equal('meta/type', tt(require('meta/type')))
    assert.equal('meta/call', tt(require('meta/call')))
  end)
  it("func addr", function()
    local a = string.lower
    local b = string.lower
    assert.equal(tostring(a), tostring(b))
    assert.equal(require('meta.type'), require('meta/type'))
  end)
end)