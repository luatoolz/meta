describe("factory", function()
  local meta, factory
--, mcache, instance
  setup(function()
    meta = require "meta"
    _ = meta.is ^ 'testdata'
    factory = meta.factory
--    mcache = meta.mcache
--    instance = require 'meta.module.instance'
  end)
  teardown(function()
    _ = meta.module('testdata') ^ false
  end)
  it("meta", function()
    assert.is_true(meta.module('testdata').chained)
    assert.is_true(meta.module('testdata.init4').chained)
  end)
  it("testdata loader", function()
    local o = require 'testdata.init4'
    assert.is_table(o)
    assert.equal('okok', o.data)
    assert.equal('ax', o.a.x.name)

    assert.equal('init4', o.q)
--    assert.is_table(mcache.loader[o])
    assert.equal('by', o.b.y.name)
  end)
  it("properties", function()
    local o = factory({x='any', z=function(x) return (tonumber(x) or 1)*4  end})
    assert.equal('any', o.x)
    assert.equal(40, o.z(10))
    assert.is_nil(o.tt)
  end)
  it("computed({})", function()
    local o = factory({x='any', z=function(x) return (tonumber(x) or 1)*4  end},{__computed={w=function(self) return self.x .. ' NOT ANY' end}})
    assert.equal('any', o.x)
    assert.equal(40, o.z(10))
    assert.is_nil(rawget(o, 'w'))
    assert.equal('any NOT ANY', o.w)
    assert.equal('any NOT ANY', rawget(o, 'w'))
  end)
  it("__computed={}", function()
    local o = factory({x='any', z=function(x) return (tonumber(x) or 1)*4  end},{__computed={w=function(self) return self.x .. ' NOT ANY' end}},
    {__computed = {w=function(self) return self.x .. ' NOT ANY OTHER' end}})
    assert.equal('any', o.x)
    assert.equal(40, o.z(10))
    assert.is_nil(rawget(o, 'w'))
    assert.equal('any NOT ANY OTHER', o.w)
    assert.equal('any NOT ANY OTHER', rawget(o, 'w'))
  end)
  it("computable({})", function()
    local o = factory({x='any', z=function(x) return (tonumber(x) or 1)*4  end},{__computable={w=function(self) return self.x .. ' NOT ANY' end}})
    assert.equal('any', o.x)
    assert.equal(40, o.z(10))
    assert.is_nil(rawget(o, 'w'))
    assert.equal('any NOT ANY', o.w)
    assert.is_nil(rawget(o, 'w'))
  end)
  it("__computable={}", function()
    local o = factory({x='any', z=function(x) return (tonumber(x) or 1)*4  end},{__computable={w=function(self) return self.x .. ' NOT ANY' end}},
    {__computable={w=function(self) return self.x .. ' NOT ANY 11' end, e=function(self) return self.x .. ' NOT ANY 22' end}})
    assert.equal('any', o.x)
    assert.equal(40, o.z(10))
    assert.is_nil(rawget(o, 'w'))
    assert.equal('any NOT ANY 11', o.w)
    assert.is_nil(rawget(o, 'w'))
    assert.is_nil(rawget(o, 'e'))
    assert.equal('any NOT ANY 22', o.e)
    assert.is_nil(rawget(o, 'e'))
  end)
  it("__comput...w+e=", function()
    local o = factory({x='any', z=function(x) return (tonumber(x) or 1)*4  end},
    {__computable={w=function(self) return self.x .. ' NOT ANY 11' end},__computed={e=function(self) return self.x .. ' NOT ANY 22' end}})
    assert.equal('any', o.x)
    assert.equal(40, o.z(10))
    assert.is_nil(rawget(o, 'w'))
    assert.equal('any NOT ANY 11', o.w)
    assert.is_nil(rawget(o, 'w'))
    assert.is_nil(rawget(o, 'e'))
    assert.equal('any NOT ANY 22', o.e)
    assert.equal('any NOT ANY 22', rawget(o, 'e'))
  end)
  it("mt", function()
    local o = factory({x='any'},{__tostring=function(self) return self.x .. ' with any' end},{__call=function(self) return 888 end})
    assert.equal('any', o.x)
    assert.equal('any with any', tostring(o))
    assert.is_nil(o.tt)
    assert.equal(888, o())
  end)
  describe("load order", function()
    it("factory", function()
      local o = require 'testdata.factory.factory'
      assert.is_table(o, 'mt is not a function')
      assert.equal('factory', o.ok)
    end)
    it("preindex", function()
      local o = require 'testdata.factory.preindex'
      assert.equal('preindex', o.ok)
    end)
    it("mt", function()
      local o = require 'testdata.factory.mt'
      assert.equal('mt', o.ok())
    end)
    it("computable", function()
      local o = require 'testdata.factory.computable'
      assert.equal('computable', o.ok)
    end)
    it("computed", function()
      local o = require 'testdata.factory.computed'
      assert.equal('computed', o.ok)
    end)
    it("loader", function()
      local o = require 'testdata.factory.loader'
--      assert.truthy(package.loaded['testdata.factory.loader'])
--      assert.falsy(package.loaded['testdata/factory/loader'])
--      assert.equal('testdata/factory/loader', instance['testdata/factory/loader'])
--      assert.equal('testdata/factory/loader', instance['testdata.factory.loader'])
--      assert.equal('testdata/factory/loader', instance[o])
      assert.equal('loader', o.ok)
    end)
    it("postindex", function()
      local o = require 'testdata.factory.postindex'
      assert.equal('postindex', o.ok)
    end)
  end)
end)