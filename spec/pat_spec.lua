describe("pat", function()
  local meta, is, pat, mtname
  setup(function()
    meta    = require 'meta'
    is      = meta.is
    pat     = meta.pat
    mtname  = pat('^__[%w_]+$')
  end)
  it("meta", function()
    assert.truthy(is)
    assert.callable(pat)
    assert.callable(mtname)
    assert.callable(pat.mtname)
  end)
  it("new", function()
    assert.is_nil(pat())

    local p = '^__[%w_]+$'
    re = pat(p)
    assert.same({p}, re)

    assert.equal(p, re[1])
    assert.equal(p, re.pattern)
    assert.equal('__[%w_]+', re.patterns)

    assert.is_function(re.find)
    assert.is_function(re.match)
    assert.is_function(re.gmatch)
    assert.is_function(re.gsub)
    assert.is_function(re.split)
    assert.is_function(re.splitz)
    assert.is_function(re.count)

    assert.is_table(pat.match)
    assert.equal(pat.match.mtname, pat.mtname.match)

    assert.is_nil(pat.iswhole)
  end)
  describe('is', function()
    it('indexed', function()
      assert.is_true(pat('(.)').isindexed)
      assert.is_true(pat('^(__[%w_]+)%s*[a-z0-9]+').isindexed)
      assert.is_true(pat('^__[%w_]+%s*([a-z0-9]+)').isindexed)
      assert.is_true(pat('^(__[%w_]+)%s*([a-z0-9]+)').isindexed)
      assert.is_true(pat('^((__[%w_]+)%s*([a-z0-9]+))').isindexed)

      assert.is_nil(pat('%(.)').isindexed)
      assert.is_nil(pat('^__[%w_]+%s*[a-z0-9]+').isindexed)
      assert.is_nil(pat('__[%w_]+').isindexed)
      assert.is_nil(pat('^%(__[%w_]+%)%s*%([a-z0-9]+%)').isindexed)
      assert.is_nil(pat('__[%w_]+%s+[%w_0-9]+').isindexed)
      assert.is_nil(pat('').isindexed)
    end)
    it('whole', function()
      assert.is_true(pat('^__[%w_]+%s+[%w_0-9]+$').iswhole)
      assert.is_nil(pat('^__[%w_]+%s+[%w_0-9]+').iswhole)
      assert.is_nil(pat('__[%w_]+%s+[%w_0-9]+$').iswhole)
      assert.is_nil(pat('__[%w_]+%s+[%w_0-9]+').iswhole)
      assert.is_nil(pat('').iswhole)
    end)
  end)
  it('match', function()
    assert.is_nil(pat('^__[%w_]+%s+%w+$').match())
    assert.is_nil(pat('^__[%w_]+%s+%w+$').match(''))
    assert.equal('__call name', pat('^__[%w_]+%s+%w+$').match('__call name'))
    assert.equal('__call name', pat('^(__[%w_]+%s+%w+)$').match('__call name'))
    assert.equal('__call', mtname.match('__call'))
  end)
  it('gmatch', function()
    assert.is_function(mtname.gmatch())
    assert.is_function(mtname.gmatch(''))

    assert.same({}, table()..mtname.gmatch())
    assert.same({}, table()..mtname.gmatch(''))
    assert.same({'__index'}, table()..mtname.gmatch('__index'))
    assert.same({'__index', '__call'}, table()..mtname.gmatch('__index __call'))
  end)
  it('splitz', function()
    re = pat('%s+')
    assert.same({}, table()..re.splitz())
    assert.same({''}, table()..re.splitz(''))
    assert.same({'__index'}, table()..re.splitz('__index'))
    assert.same({'', '__index'}, table()..re.splitz(' __index'))
    assert.same({'__index', ''}, table()..re.splitz('__index '))
    assert.same({'', '__index', ''}, table()..re.splitz(' __index '))
    assert.same({'__index', '__call'}, table()..re.splitz('__index __call'))
    assert.same({'__index', '__call'}, table()..re.splitz('__index  __call'))
  end)
  it('split', function()
    re = pat('%s+')
    assert.same({}, table()..re.split())
    assert.same({}, table()..re.split(''))
    assert.same({'__index'}, table()..re.split('__index'))
    assert.same({'__index'}, table()..re.split(' __index'))
    assert.same({'__index'}, table()..re.split('__index '))
    assert.same({'__index'}, table()..re.split(' __index '))
    assert.same({'__index', '__call'}, table()..re.split('__index __call'))
    assert.same({'__index', '__call'}, table()..re.split('__index  __call'))
  end)
  describe('trim', function()
    it('ltrim', function()
      re = pat('%s+')
      assert.is_nil(re.ltrim())
      assert.equal('', re.ltrim(''))
      assert.equal('', re.ltrim(' '))
      assert.equal('', re.ltrim('  '))
      assert.equal('a', re.ltrim('a'))
      assert.equal('a', re.ltrim(' a'))
      assert.equal('a', re.ltrim('  a'))
      assert.equal('a ', re.ltrim('a '))
      assert.equal('a  ', re.ltrim('a  '))
    end)
    it('rtrim', function()
      re = pat('%s+')
      assert.is_nil(re.rtrim())
      assert.equal('', re.rtrim(''))
      assert.equal('', re.rtrim(' '))
      assert.equal('', re.rtrim('  '))
      assert.equal('a', re.rtrim('a'))
      assert.equal(' a', re.rtrim(' a'))
      assert.equal('  a', re.rtrim('  a'))
      assert.equal('a', re.rtrim('a '))
      assert.equal('a', re.rtrim('a  '))
    end)
    it('trim', function()
      re = pat('%s+')
      assert.is_nil(re.trim())
      assert.equal('', re.trim(''))
      assert.equal('', re.trim(' '))
      assert.equal('', re.trim('  '))
      assert.equal('a', re.trim('a'))
      assert.equal('a', re.trim(' a'))
      assert.equal('a', re.trim('  a'))
      assert.equal('a', re.trim('a '))
      assert.equal('a', re.trim('a  '))
    end)
  end)
  it('gsub', function()
    assert.is_nil(mtname.gsub())
    assert.equal('', mtname.gsub(''))
    assert.equal('ok', mtname.gsub('__index', 'ok'))
    assert.equal('ok ok', mtname.gsub('__index __call', 'ok'))
  end)
  it('gsuber', function()
    assert.equal('__CALL', pat.mtname.gsuber(string.upper)('__call'))
    assert.equal('o', pat.mtname.gsuber('o')('__index'))
    assert.equal('true __b qwerty __d', pat.mtname.gsuber({__a='true',__b=false,__c='qwerty'})('__a __b __c __d'))
    assert.equal('true false __c __d', pat.mtname.gsuber({__a='true',__b='false',__c='qwerty'}, 2)('__a __b __c __d'))
  end)
  it('count', function()
    assert.equal(0, mtname.count())
    assert.equal(0, mtname.count(''))
    assert.equal(1, mtname.count('__index'))
    assert.equal(2, mtname.count('__index __call'))
  end)
  it('__call', function()
    assert.is_nil(pat('^(__[%w_]+)%s*([a-z0-9]+)')())
    assert.is_nil(pat('^(__[%w_]+)%s*([a-z0-9]+)')(''))
    assert.same({'__call', 'name1'}, pat('^(__[%w_]+)%s*([a-z0-9]+)')('__call name1'))
    assert.equal('__call name2', pat('^__[%w_]+%s+[%w_0-9]+$')('__call name2'))
    assert.equal('__call name3', pat('^__[%w_]+%s+%w+$')('__call name3'))
    assert.equal('__call name4', pat('__[%w_]+%s+%w+')('__call name4'))
    assert.same({'__call name5'}, pat('^(__[%w_]+%s+%w+)$')('__call name5'))
    assert.same({'__call', 'name6'}, pat('^(__[%w_]+)%s+(%w+)$')('__call name6'))

    assert.same({'__call', 'name'}, pat('^(__[%w_]+)%s+([a-z]+)')('__call name'))
    assert.same({'__call', 'NAME'}, pat('^(__[%w_]+)%s+(%w+)')('__call NAME'))
    assert.is_nil(pat('^(__[%w_]+)%s+([a-z]+)')('__call NAME'))

    assert.equal('__index', mtname('__index'))
  end)
  it("__mod/__mul", function()
    assert.equal(table('__index'), table('__index')*mtname)
    assert.equal(table('__index'), table('__index')%mtname)
  end)
end)