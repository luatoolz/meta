describe("array", function()
  local meta, number, array, map, tuple
  setup(function()
    meta = require 'meta'
    number= meta.number
    array = meta.array
    map   = table.map
    tuple = meta.tuple
  end)
  it("__pairs", function()
    assert.equal(array('a', 'b', 'c'), array('a', 'b', 'c'))
    assert.equal(array('a', 'b', 'c'), array(map(array('a', 'b', 'c'))))
    assert.equal(array('a', 'b', 'c'), array(map(array('a', 'b', 'c'))))
    assert.same(array('a', 'b', 'c'), map(array('a', 'b', 'c')))
    assert.equal(array('a', 'b', 'c'), array('a', 'b', 'c') * tuple.noop)
  end)
  describe("create", function()
    it("nil", function()
      assert.is_table(array())
      assert.is_table(array({}))
      assert.same(array(), array({}))
      assert.is_nil(array()['a'])
      assert.is_nil(array()[''])
      assert.is_nil(array()[0])
      assert.is_nil(array()[1])
      assert.is_nil(array()[nil])
    end)
    it("nil operations", function()
      assert.equal(array(), array() .. array())
      assert.equal(array(), array() + array())
      assert.equal(array(), array() - array())
      assert.equal(array(), array() * nil)
      assert.equal(true, array() == array())
    end)
    it("1+nil operations", function()
      assert.equal(array('a'), array('a') + array())
      assert.equal(array('a', 'a'), array('a') + array('a'))
      assert.equal(array('a'), array() + array('a'))
      assert.equal(array('a'), array('a') .. array())
      assert.equal(array('a', 'a'), array('a') .. array('a'))
      assert.equal(array('a'), array() .. array('a'))
      assert.equal(array('a'), array('a') - array())
      assert.equal(array(), array('a') - array(1))
    end)
    it("1+1+nil operations", function()
      assert.equal(array('a', 'b'), array('a') + array('b'))
      assert.equal(array('b', 'a'), array('b') + array('a'))
      assert.equal(array('a', 'b'), array('a') .. array('b'))
      assert.equal(array('b', 'a'), array('b') .. array('a'))
      assert.equal(array('a', 'b'), array('a', 'b') - array())
      assert.equal(array('b'), array('a', 'b') - array(1))
      assert.equal(array('a'), array('a', 'b') - array(2))
    end)
    it("2+ operations", function()
      assert.equal(array('a', 'b', 'b', 'a'), array('a', 'b') + array('b', 'a'))
      assert.equal(array('b', 'a', 'a', 'b'), array('b', 'a') + array('a', 'b'))
      assert.equal(array('a', 'b', 'b', 'a'), array('a', 'b') .. array('b', 'a'))
      assert.equal(array('b', 'a', 'a', 'b'), array('b', 'a') .. array('a', 'b'))
      assert.equal(array('a', 'b'), array('a', 'b') - array())
      assert.equal(array('b'), array('a', 'b') - array(1))
      assert.equal(array('b'), array('a', 'b') - 1)
      assert.equal(array(), array('a', 'b') - array(1, 1))
      assert.equal(array(), array('a', 'b') - array(2, 1))
      assert.equal(array(), array('a', 'b') - array(1, 2))
      assert.equal(array(), array('a', 'b') - array(2, 2))
    end)
  end)
  it("regular operations", function()
    assert.same(array('a', 'b', 'c'), map(array('a', 'b', 'c')))
    assert.is_function(tuple.noop)
    assert.equal('a', array('a')[1])
    assert.is_table(array('a', 'b'))
  end)
  it("compare", function()
    assert.is_true(array('a', 'b', 'c', 'd') == array('a', 'b', 'c', 'd'))
    assert.is_true(array('a', 'd', 'b', 'c') ~= array('a', 'b', 'c', 'd'))
  end)
  it("map", function()
    assert.equal(array(2, 14, 176), array('1', '7', '88') * function(x) return number(x)*2 end)
    assert.equal(array('2', '14', '176'), array('2', '14', '176'))
    assert.equal(array('1', '7', '88'), array(1, 7, 88)*tostring)
    assert.equal(88, number('88'))
    assert.equal(array(1, 7, 88), array('1', '7', '88')*number)

    local ips = function() return '127','0','0','1' end
    assert.equal('127.0.0.1', table.concat(array('127','0','0','1'), '.'))
    assert.equal(array('127','0','0','1'), array(ips()))
    assert.equal(array('127','0','0','1'), array()..array(ips()))
    assert.equal('127.0.0.1', table.concat({}..array(ips()), '.'))
    assert.equal(array('127','0','0'), array(ips())[{1,3}])
    assert.equal('127.0.0.1', table.concat(array(ips()),'.'))
  end)
  it("filter", function()
    assert.same(array('88'), array('1', '7', '88') % function(x) return number(x)>50 end)
  end)
  it("__tostring", function()
    assert.equal('1\n7\n88', tostring(array('1', '7', '88')))
  end)
  it("array.flatten", function()
    assert.is_function(array.flatten)
    assert.same({"y", "x", "z"}, array.flatten({{"y", "x", "z"}}))
    assert.same({"y", "x", "z"}, array:flatten({{"y", "x", "z"}}))
  end)

--[[
  it("__export", function()
    assert.same({}, tex(array()))
    assert.same({}, tex(array({})))
    assert.same({'a'}, tex(array('a')))
    assert.same({'a', 'b', 'c', 'd'}, tex(array('a', 'b', 'c', 'd')))
    assert.same({1,2,3,4}, tex(array(1,2,3,4)))

    assert.same({}, tex(tex(array())))
    assert.same({}, tex(tex(array({}))))
    assert.same({'a'}, tex(tex(array('a'))))
    assert.same({'a', 'b', 'c', 'd'}, tex(tex(array('a', 'b', 'c', 'd'))))
    assert.same({1,2,3,4}, tex(tex(array(1,2,3,4))))

    local add=function(x) return tex(x, true) end
    assert.same({}, add(array()))
    assert.same({}, add(array({})))
    assert.same({'a', __array=true}, add(array('a')))
    assert.same({'a', 'b', 'c', 'd', __array=true}, add(array('a', 'b', 'c', 'd')))
    assert.same({1,2,3,4, __array=true}, add(array(1,2,3,4)))

    assert.same({}, add(add(array())))
    assert.same({}, add(add(array({}))))
    assert.same({'a', __array=true}, add(add(array('a'))))
    assert.same({'a', 'b', 'c', 'd', __array=true}, add(add(array('a', 'b', 'c', 'd'))))
    assert.same({1,2,3,4,__array=true}, add(add(array(1,2,3,4))))
  end)
--]]

  -- test of elements auto typing
  it("typed elements", function()
    assert.equal(array('2', '14', '176'), array('2', '14', '176') + 12)
    assert.equal(array(1, 7, 88), array(1, 7, 88) + 'some')
  end)
end)